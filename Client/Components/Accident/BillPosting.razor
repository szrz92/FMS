@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using SOS.FMS.Shared.ViewModels.Accident


<div id="kt_quick_cart" class="offcanvas offcanvas-right p-10 offcanvas-on" style="width:50%">
    <!--begin::Header-->
    <div class="offcanvas-header d-flex align-items-center justify-content-between pb-7" kt-hidden-height="46" style="">
        <h4 class="font-weight-bold m-0">@CheckPointId.Remarks @VehicleNumber</h4>
        <a @onclick="CloseBillPosting" class="btn btn-xs btn-icon btn-light btn-hover-primary" id="kt_quick_cart_close">
            <i class="ki ki-close icon-xs text-muted"></i>
        </a>
    </div>
    <!--end::Header-->
    <!--begin::Content-->
    <div class="offcanvas-content pr-5 mr-n5 scroll ps ps--active-y">
        <div class="d-flex flex-column">
            <EditForm Model="bill" OnValidSubmit="PostBill">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationSummary></ValidationSummary>
                <div class="row">
                    <div class="col-5">
                        <div class="card">
                            <div class="card-header">
                                Total Amount
                            </div>
                            <div class="card-body">
                                <div class="form-group">
                                    <SfNumericTextBox @bind-Value="bill.BillAmount" class="form-control"></SfNumericTextBox>
                                    <span class="form-text text-muted">Please enter total amount paid</span>
                                </div>
                            </div>
                        </div>
                        <div class="card">
                            <div class="card-header">
                                Remarks
                            </div>
                            <div class="card-body">
                                <div class="form-group">
                                    <SfTextBox @bind-Value="bill.Remarks" class="form-control" Multiline="true"></SfTextBox>
                                    <span class="form-text text-muted">Please enter remarks</span>
                                </div>
                            </div>
                        </div>
                        <div class="card">
                            <div class="card-header">
                                Uploaded Files
                            </div>
                            <div class="card-body">
                                <ul>
                                    <li>
                                        <a @onclick="() => Play()">Video</a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="col-1">
                    </div>
                    <div class="col-6">
                        <div class="card">
                            <div class="card-header">
                                Upload Files
                            </div>
                            <div class="card-body">
                                <div ID="DropArea" style="padding: 60px 100px; border: 1px solid #c3c3c3; text-align: center; width: 100%; display: inline-flex;">
                                    Drop files here to upload
                                </div>
                                <SfUploader DropArea="#DropArea"></SfUploader>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
        <!--end::Content-->
    </div>
</div>
<Modal @ref="modal" Visible="ModalVisibility">
    <Title>Video Player</Title>
    <Body><VideoPlayer source="@source"></VideoPlayer></Body>
    <Footer>
        <button type="button" class="btn btn-info" data-dismiss="modal" @onclick="() => modal.Close()">Close</button>
    </Footer>
</Modal>
@code {
    [Parameter]
    public ApiRequest CheckPointId { get; set; }
    [Parameter]
    public string VehicleNumber { get; set; }
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public EventCallback<bool> OnVisibilityChanged { get; set; }

    public Modal modal { get; set; }

    FMSAccidentalCheckCommentVM AccidentalCheckComment;

    public BillPostingVM BillPostingVM = new BillPostingVM();
    public AccidentBill bill = new AccidentBill();

    public List<AccidentBill> BillsList = new List<AccidentBill>();

    protected override async Task OnInitializedAsync()
    {
        BillsList = await GetBills();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        bill.CheckPointId = CheckPointId.FMSAccidentalCheckId;
        BillPostingVM.CheckPointId = CheckPointId.FMSAccidentalCheckId;
        await base.OnAfterRenderAsync(firstRender);
    }

    public void OnImagePost(string image)
    {
        BillPostingVM.images.Add(image);
        bill.BillImage = image;
    }

    public Task CloseBillPosting()
    {
        return OnVisibilityChanged.InvokeAsync(false);
    }

    public async Task<List<AccidentBill>> GetBills()
    {
        ApiRequest request = new ApiRequest() { FMSAccidentalCheckId = CheckPointId.FMSAccidentalCheckId };
        var getBillResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Accident/GetBills", request);
        return JsonConvert.DeserializeObject<List<AccidentBill>>(await getBillResponse.Content.ReadAsStringAsync());
    }

    public async void PostBill()
    {
        var postBillResponse = await Http.PostAsJsonAsync<AccidentBill>("api/Accident/PostBill", bill);

        if (postBillResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            BillsList = await GetBills();
            StateHasChanged();
        }
        else
        {
        }
    }

    public bool ModalVisibility { get; set; }
    public string source { get; set; } 

    public void Play(string url = "https://res.cloudinary.com/blazoredgitter/video/upload/v1557015491/samples/elephants.mp4")
    {
        source = url;
        ModalVisibility = true;
        StateHasChanged();
    }

}

