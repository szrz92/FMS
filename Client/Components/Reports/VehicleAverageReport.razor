@inject HttpClient Http
@using SOS.FMS.Shared
@using Syncfusion.Blazor.Calendars

@if (showReportModal)
{
<div class="header d-flex align-items-center" style="position:fixed;">
    <div class="mr-2" style="width:135%">
        <div class="control-wrapper">
            <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a region" @bind-Value="Filter.Region" AllowFiltering="true" DataSource="@regionsList">
                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
    </div>
    <div class="mr-2" style="width:100%">
        <div class="control-wrapper">
            <SfDropDownList TItem="string" TValue="string" Placeholder="Select Daily/Monthly" @bind-Value="Filter.DailyMonthlyType" AllowFiltering="true" DataSource="@DailyMonthly">
                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                <DropDownListEvents TValue="string" ValueChange="OnDailyMonthlyChange"></DropDownListEvents>
            </SfDropDownList>
        </div>
    </div>
    @if (Filter.DailyMonthlyType == "Daily")
    {<div class="mr-2" style="width:100%">
            <div class="control-wrapper">
                <SfDatePicker TValue="DateTime" Placeholder="From date" Min='@MinDate' @bind-Value='@Filter.Timestamp' Format='dd MMMM yyyy' Start="@CalendarView.Decade" Depth="@CalendarView.Month"></SfDatePicker>
            </div>
        </div>
        <div class="mr-2" style="width:100%">
            <div class="control-wrapper">
                <SfDatePicker TValue="DateTime" Placeholder="To date" Min='@MinDate' @bind-Value='@ToDate' Format='dd MMMM yyyy' Start="@CalendarView.Decade" Depth="@CalendarView.Month"></SfDatePicker>
            </div>
        </div>
    }
    @if (Filter.DailyMonthlyType == "Monthly")
    {<div class="mr-2" style="width:135%">
            <div class="control-wrapper">
                <SfDatePicker TValue="DateTime" Placeholder="Select month/year" Min='@MinDate' @bind-Value='@Filter.Timestamp' Format='MMMM yyyy' Start="@CalendarView.Decade" Depth="@CalendarView.Year"></SfDatePicker>
            </div>
        </div>

    }

    <div class="mr-2" style="width:135%">
        <div class="control-wrapper">
            <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select fuel type" @bind-Value="Filter.FuelType" AllowFiltering="true" DataSource="@fuelTypeList">
                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
    </div>
    <div class="mr-2" style="width:135%">
        <div class="control-wrapper">
            <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select vehicle type" @bind-Value="Filter.VehicleType" AllowFiltering="true" DataSource="@VehicleTypeList">
                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
    </div>

    <div class="mr-2" style="width:135%">
        <div class="control-wrapper">
            <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select make" @bind-Value="Filter.Make" AllowFiltering="true" DataSource="@MakeList">
                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
    </div>
    <div class="mr-2" style="width:135%">
        <div class="control-wrapper">
            <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select model" @bind-Value="Filter.Model" AllowFiltering="true" DataSource="@ModelList">
                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
    </div>
    <div class="mr-2" style="width:135%">
        <div class="control-wrapper">
            <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select payment" @bind-Value="Filter.PaymentType" AllowFiltering="true" DataSource="@paymentTypeList">
                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
    </div>

    <div class="mr-2" style="width:135%">
        <div class="control-wrapper">
            <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select vehicle" @bind-Value="Filter.VehicleNumber" AllowFiltering="true" DataSource="@vehiclesList">
                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
    </div>
    <button class="btn btn-bg-danger text-white mr-2" @onclick="FilterData">FILTER</button>
    <button class="btn btn-bg-info text-white mr-2" @onclick="ResetData">RESET</button>
</div>

    <div class="col-lg-12 control-section" style="overflow-x: scroll; padding-top: 4.0em;">
        <div class="content-wrapper">
            <div class="row">
                <div id="container">
                    <SfGrid ID="FuelReportGrid" @ref="FuelReportGrid" DataSource="@FilteredDailyFuelReportList"
                            AllowPaging="true" AllowSorting="true" AllowFiltering="false"
                            Height="600" RowHeight="38"
                            Toolbar="@(new List<string>() { "ExcelExport", "CsvExport", "PdfExport" })"
                            AllowExcelExport="true" AllowPdfExport="true">
                        <GridPageSettings PageCount="5" PageSize="20" PageSizes="new int[]{ 5, 10, 20, 50, 100 }"></GridPageSettings>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                        <GridSelectionSettings CheckboxOnly="true" PersistSelection="true" Type="SelectionType.Multiple">
                        </GridSelectionSettings>
                        <GridEvents OnToolbarClick="ToolbarClick" TValue="DailyFuelReport">
                        </GridEvents>
                        <GridColumns>
                            <GridColumn Field=@nameof(DailyFuelReport.Region) HeaderText="Region" Width="180"></GridColumn>
                            <GridColumn Field=@nameof(DailyFuelReport.VehicleNumber) HeaderText="Vehicle Number" Width="180"></GridColumn>

                            <GridColumn Field=@nameof(DailyFuelReport.Mileage) HeaderText="Total Mileage(km)" Width="180"></GridColumn>
                          
                            <GridColumn Field=@nameof(DailyFuelReport.Litres) HeaderText="Total Litres" Width="180"></GridColumn>
                            <GridColumn Field=@nameof(DailyFuelReport.Average) HeaderText="Average" Width="180"></GridColumn>
                        </GridColumns>

                    </SfGrid>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <img style="position:fixed;top:50%;left:50%;" src="assets/media/loading.gif" />
}
@code {
    public bool showReportModal = false;
    SfGrid<DailyFuelReport> FuelReportGrid;
    public DateTime MinDate { get; set; } = new DateTime(2020, 1, 1);
    public DateTime ToDate = DateTime.Now;

    public List<DailyFuelReport> DailyFuelReportList { get; set; } = new List<DailyFuelReport>();
    public List<DailyFuelReport> FilteredDailyFuelReportList { get; set; } = new List<DailyFuelReport>();

    public DailyFuelReport Filter { get; set; } = new DailyFuelReport() { DailyMonthlyType = "Daily"};

    public List<SelectListItem> regionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> subRegionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> stationsList { get; set; } = new List<SelectListItem>();

    public List<SelectListItem> paymentTypeList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> fuelTypeList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> vehiclesList { get; set; } = new List<SelectListItem>();

    public List<SelectListItem> VehicleTypeList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> MakeList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> ModelList { get; set; } = new List<SelectListItem>();

    public List<string> DailyMonthly { get; set; } = new List<string>() { "Daily", "Monthly" };

    protected override async Task OnInitializedAsync()
    {
        await GetDailyFuelReportsList();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "FuelReportGrid_pdfexport")
        {
            PdfExportProperties Props = new PdfExportProperties();
            Props.PageOrientation = PageOrientation.Landscape;
            Props.PageSize = PdfPageSize.A3;
            this.FuelReportGrid.PdfExport(Props);
        }
        if (args.Item.Id == "FuelReportGrid_excelexport")
        {
            this.FuelReportGrid.ExcelExport();
        }
        if (args.Item.Id == "FuelReportGrid_csvexport")
        {
            this.FuelReportGrid.CsvExport();
        }
    }

    public void NotifyChangeState()
    {
        StateHasChanged();
    }

    public async Task GetDailyFuelReportsList()
    {
        DailyFuelReportList = (await Http.GetFromJsonAsync<List<DailyFuelReport>>("api/reports/all"))
        .OrderByDescending(x => x.Timestamp)
        .ToList();
        FilteredDailyFuelReportList = DailyFuelReportList;

        DistinctEntries();

        regionsList = DailyFuelReportList.GroupBy(x => x.Region).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();

        paymentTypeList = DailyFuelReportList.GroupBy(x => x.PaymentType).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        fuelTypeList = DailyFuelReportList.GroupBy(x => x.FuelType).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();

        VehicleTypeList = DailyFuelReportList.GroupBy(x => x.VehicleType).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        MakeList = DailyFuelReportList.GroupBy(x => x.Make).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        ModelList = DailyFuelReportList.GroupBy(x => x.Model).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        vehiclesList = DailyFuelReportList.GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        StateHasChanged();
    }

    #region Filter
    public void FilterData()
    {
        showReportModal = false;

        if (Filter.Timestamp.Day.Equals(1) && Filter.Timestamp.Month.Equals(1) && Filter.Timestamp.Year.Equals(1))
        {
            FilteredDailyFuelReportList = DailyFuelReportList
   .Where(x => (string.IsNullOrEmpty(Filter.Region) || x.Region == Filter.Region))
   .Where(x => (string.IsNullOrEmpty(Filter.FuelType) || x.FuelType == Filter.FuelType))
   .Where(x => (string.IsNullOrEmpty(Filter.PaymentType) || x.PaymentType == Filter.PaymentType))
   .Where(x => (string.IsNullOrEmpty(Filter.VehicleType) || x.VehicleType == Filter.VehicleType))
   .Where(x => (string.IsNullOrEmpty(Filter.Make) || x.Make == Filter.Make))
   .Where(x => (string.IsNullOrEmpty(Filter.Model) || x.Model == Filter.Model))
   .Where(x => (string.IsNullOrEmpty(Filter.VehicleNumber) || x.VehicleNumber == Filter.VehicleNumber))
   .ToList();

        }
        else
        {
            if (Filter.DailyMonthlyType == "Daily")
            {
                FilteredDailyFuelReportList = DailyFuelReportList
.Where(x => (string.IsNullOrEmpty(Filter.Region) || x.Region == Filter.Region))
.Where(x => (string.IsNullOrEmpty(Filter.FuelType) || x.FuelType == Filter.FuelType))
.Where(x => (string.IsNullOrEmpty(Filter.PaymentType) || x.PaymentType == Filter.PaymentType))
.Where(x => (string.IsNullOrEmpty(Filter.VehicleType) || x.VehicleType == Filter.VehicleType))
.Where(x => (string.IsNullOrEmpty(Filter.Make) || x.Make == Filter.Make))
.Where(x => (string.IsNullOrEmpty(Filter.Model) || x.Model == Filter.Model))
.Where(x => (x.Timestamp.Day >= Filter.Timestamp.Day && x.Timestamp.Month >= Filter.Timestamp.Month && x.Timestamp.Year >= Filter.Timestamp.Year && x.Timestamp.Day <= ToDate.Day && x.Timestamp.Month <= ToDate.Month && x.Timestamp.Year <= ToDate.Year))
.Where(x => (string.IsNullOrEmpty(Filter.VehicleNumber) || x.VehicleNumber == Filter.VehicleNumber))
.ToList();

            }
            else
            {
                FilteredDailyFuelReportList = DailyFuelReportList
.Where(x => (string.IsNullOrEmpty(Filter.Region) || x.Region == Filter.Region))
.Where(x => (string.IsNullOrEmpty(Filter.FuelType) || x.FuelType == Filter.FuelType))
.Where(x => (string.IsNullOrEmpty(Filter.PaymentType) || x.PaymentType == Filter.PaymentType))
.Where(x => (string.IsNullOrEmpty(Filter.VehicleType) || x.VehicleType == Filter.VehicleType))
.Where(x => (string.IsNullOrEmpty(Filter.Make) || x.Make == Filter.Make))
.Where(x => (string.IsNullOrEmpty(Filter.Model) || x.Model == Filter.Model))
.Where(x => (x.Timestamp.Month == Filter.Timestamp.Month && x.Timestamp.Year == Filter.Timestamp.Year))
.Where(x => (string.IsNullOrEmpty(Filter.VehicleNumber) || x.VehicleNumber == Filter.VehicleNumber))
.ToList();
            }
        }
        DistinctEntries();
    }

    public void ResetData()
    {
        Filter = new DailyFuelReport() { DailyMonthlyType = "Daily"};
        showReportModal = false;
        FilteredDailyFuelReportList = DailyFuelReportList;
        DistinctEntries();

    }
    #endregion

    private void OnDailyMonthlyChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        Filter.DailyMonthlyType = args.Value;
        StateHasChanged();
    }

    public void DistinctEntries()
    {
        FilteredDailyFuelReportList = FilteredDailyFuelReportList.GroupBy(x => new { x.Region, x.VehicleNumber, x.FuelType, x.Driver })
        .Select(x => new DailyFuelReport()
        {
            Region = x.Key.Region,
            VehicleNumber = x.Key.VehicleNumber,
            Litres = Convert.ToString(x.Sum(y => Convert.ToDouble(y.Litres))),
            Odometer = x.OrderBy(y => y.Timestamp).Select(z => z.Odometer).Last(),
            PreviousOdometer = x.OrderBy(y => y.Timestamp).Select(z => z.PreviousOdometer).First(),
            Average = Convert.ToString((x.OrderBy(x => x.Timestamp).Select(y => Convert.ToDouble(y.Odometer)).Last() - x.OrderBy(x => x.Timestamp).Select(y => Convert.ToDouble(y.PreviousOdometer)).First()) / x.Sum(y => Convert.ToDouble(y.Litres))),
            Mileage = Convert.ToString(x.OrderBy(x => x.Timestamp).Select(y => Convert.ToDouble(y.Odometer)).Last() - x.OrderBy(x => x.Timestamp).Select(y => Convert.ToDouble(y.PreviousOdometer)).First()),
            Amount = Convert.ToString(x.Sum(y => Convert.ToDouble(y.Amount))),
            FuelType = x.Key.FuelType,
            Driver = x.Key.Driver

        }).ToList();
       
        showReportModal = true;
        StateHasChanged();
    }

}
