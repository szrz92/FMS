@inject HttpClient Http

@if (FilteredEmergencyList != null)
{
    <div class="d-flex flex-column">
        <div class="p-2 d-flex flex-row justify-content-end">
            <div class="mr-2">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a region" @bind-Value="Filter.Region" AllowFiltering="true" DataSource="@regionsList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" ValueChange="OnRegionChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>
            <div class="mr-2">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a subregion" @bind-Value="Filter.SubRegion" AllowFiltering="true" DataSource="@subRegionsList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" ValueChange="OnSubRegionChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>
            <div class="mr-2">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a status" @bind-Value="Filter.MaintenanceStatus" AllowFiltering="true" DataSource="@statusList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="mr-2">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a vehicle" @bind-Value="Filter.VehicleNumber" AllowFiltering="true" DataSource="@vehiclesList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" ValueChange="OnVehicleNumberChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>
            <button class="btn btn-bg-danger text-white mr-2" @onclick="FilterData">FILTER</button>
            <button class="btn btn-bg-info text-white mr-2" @onclick="ResetData">RESET</button>
        </div>
        <div class="p-2">
            <div class="control-section">
                <div class="content-wrapper">
                    <div class="row">
                        <div id="container">
                            <SfGrid ID="EmergencyGrid" @ref="EmergencyGrid" DataSource="@FilteredEmergencyList"
                                    AllowPaging="true" AllowSorting="true" AllowFiltering="true"
                                    Height="600" RowHeight="38"
                                    Toolbar="@(new List<string>() { "ExcelExport", "CsvExport", "PdfExport" })"
                                    AllowExcelExport="true" AllowPdfExport="true">
                                <GridPageSettings PageCount="5" PageSize="20" PageSizes="new int[]{ 5, 10, 20, 50, 100 }"></GridPageSettings>
                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridSelectionSettings CheckboxOnly="true" PersistSelection="true" Type="SelectionType.Multiple"></GridSelectionSettings>
                                <GridEvents OnToolbarClick="EmergencyToolbarClick" TValue="FMSEmergencyVM"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field=@nameof(FMSEmergencyVM.Driver) TextAlign="TextAlign.Center" HeaderText="Driver" Width="130"></GridColumn>
                                    <GridColumn Field=@nameof(FMSEmergencyVM.VehicleNumber) HeaderText="Vehicle Number" Width="130"></GridColumn>
                                    <GridColumn Field=@nameof(FMSEmergencyVM.Description) HeaderText="Description" Width="230"></GridColumn>
                                    <GridColumn Field=@nameof(FMSEmergencyVM.Region) HeaderText="Region" Width="130"></GridColumn>
                                    <GridColumn Field=@nameof(FMSEmergencyVM.SubRegion) HeaderText="Subregion" Width="130"></GridColumn>
                                    <GridColumn Field=@nameof(FMSEmergencyVM.MaintenanceStatus) HeaderText="Maintenance" Width="130"></GridColumn>
                                    <GridColumn Field=@nameof(FMSEmergencyVM.ReportTime) Format="dd/MM/yy hh:mm" Type="ColumnType.DateTime" HeaderText="Reported At" Width="130"></GridColumn>
                                    <GridColumn Field=@nameof(FMSEmergencyVM.CarOperationalTime) Format="dd/MM/yy hh:mm" Type="ColumnType.DateTime" HeaderText="Operational At" Width="130"></GridColumn>
                                    <GridColumn Field=@nameof(FMSEmergencyVM.JobClosingTime) Format="dd/MM/yy hh:mm" Type="ColumnType.DateTime" HeaderText="Closed At" Width="130"></GridColumn>
                                    <GridColumn Field=@nameof(FMSEmergencyVM.LastUpdated) Format="dd/MM/yy hh:mm" Type="ColumnType.DateTime" HeaderText="Last Update" Width="130"></GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <h5>Loading.....</h5>
}
@code {
    public List<FMSEmergencyVM> EmergencyList { get; set; }

    public List<FMSEmergencyVM> FilteredEmergencyList { get; set; }

    public List<SelectListItem> regionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> subRegionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> statusList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> vehiclesList { get; set; } = new List<SelectListItem>();

    public FMSEmergencyVM Filter { get; set; } = new FMSEmergencyVM();

    public void FilterData()
    {
        FilteredEmergencyList = EmergencyList
    .Where(x => (string.IsNullOrEmpty(Filter.Region) || x.Region == Filter.Region))
    .Where(x => (string.IsNullOrEmpty(Filter.SubRegion) || x.SubRegion == Filter.SubRegion))
    .Where(x => (string.IsNullOrEmpty(Filter.MaintenanceStatus) || x.MaintenanceStatus == Filter.MaintenanceStatus))
    .Where(x => (string.IsNullOrEmpty(Filter.VehicleNumber) || x.VehicleNumber == Filter.VehicleNumber))
    .ToList();
        StateHasChanged();
    }

    public void ResetData()
    {
        Filter = new FMSEmergencyVM();
        FilteredEmergencyList = EmergencyList;
        regionsList = EmergencyList.GroupBy(x => x.Region)
            .Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        subRegionsList = EmergencyList.GroupBy(x => x.SubRegion)
            .Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        statusList = EmergencyList.GroupBy(x => x.MaintenanceStatus)
            .Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        vehiclesList = EmergencyList.GroupBy(x => x.VehicleNumber)
            .Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();

        StateHasChanged();
    }

    public async Task OnRegionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        vehiclesList = FilteredEmergencyList.Where(x => x.Region == args.Value)
            .GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        subRegionsList = FilteredEmergencyList.Where(x => x.Region == args.Value)
            .GroupBy(x => x.SubRegion).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        StateHasChanged();
    }
    public async Task OnSubRegionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        Filter.Region = FilteredEmergencyList.Where(x => x.SubRegion == args.Value).FirstOrDefault().Region;
        vehiclesList = FilteredEmergencyList.Where(x => x.SubRegion == args.Value)
            .GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
    }

    public async Task OnVehicleNumberChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        Filter.Region = FilteredEmergencyList.Where(x => x.VehicleNumber == args.Value).FirstOrDefault().Region;
        Filter.SubRegion = FilteredEmergencyList.Where(x => x.VehicleNumber == args.Value).FirstOrDefault().SubRegion;
        Filter.MaintenanceStatus = FilteredEmergencyList.Where(x => x.VehicleNumber == args.Value).FirstOrDefault().MaintenanceStatus;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        EmergencyList = (await Http.GetFromJsonAsync<List<FMSEmergencyVM>>("api/Emergency/All"))
        .OrderByDescending(x => x.LastUpdated)
        .ToList();

        FilteredEmergencyList = EmergencyList;
        regionsList = EmergencyList.GroupBy(x => x.Region).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        subRegionsList = EmergencyList.GroupBy(x => x.SubRegion).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        statusList = EmergencyList.GroupBy(x => x.MaintenanceStatus).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        vehiclesList = EmergencyList.GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    #region Syncfusion

    SfGrid<FMSEmergencyVM> EmergencyGrid;

    public void EmergencyToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "EmergencyGrid_pdfexport")
        {
            PdfExportProperties Props = new PdfExportProperties();
            Props.PageOrientation = PageOrientation.Landscape;
            Props.PageSize = PdfPageSize.A4;
            this.EmergencyGrid.PdfExport(Props);
        }
        if (args.Item.Id == "EmergencyGrid_excelexport")
        {
            this.EmergencyGrid.ExcelExport();
        }
        if (args.Item.Id == "EmergencyGrid_csvexport")
        {
            this.EmergencyGrid.CsvExport();
        }
    }
    #endregion

}
