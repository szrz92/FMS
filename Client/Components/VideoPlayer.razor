@using Blazored.Video
@using Blazored.Video.Support

<style>
    .flash0 {
        animation: FLASH0 200ms ease-in-out;
    }

    .flash1 {
        animation: FLASH1 200ms ease-in-out;
    }

    @@keyframes FLASH0 {
        0% {
            background-color: rgba(255, 216, 0, 0.8);
        }

        100% {
            background-color: rgba(255, 216, 0, 0);
        }
    }

    @@keyframes FLASH1 {
        0% {
            background-color: rgba(255, 216, 0, 0.8);
        }

        100% {
            background-color: rgba(255, 216, 0, 0);
        }
    }
</style>
<div class="d-flex align-items-start justify-content-center">
    <div class="d-flex flex-column p-2 align-content-center border border-info">
        <BlazoredVideo EventFired="OnEvent"
                       VideoEventOptions="options"
                       class="w-100"
                       style="max-width:800px;"
                       controls="controls">
            <source src="@source" type="video/mp4" />
        </BlazoredVideo>
    </div>
</div>

@code { 
    [Parameter]
    public string source { get; set; }

    Dictionary<VideoEvents, VideoStateOptions> options = new Dictionary<VideoEvents, VideoStateOptions>();
    VideoState videoState;
    Dictionary<VideoEvents, int> eventCounter = new Dictionary<VideoEvents, int>();

    protected override void OnInitialized()
    {
        foreach (var item in (VideoEvents[])(Enum.GetValues(typeof(VideoEvents))))
        {
            if (item != VideoEvents.NotSet)
            {
                eventCounter[item] = 0;
            }
        }
        var option = new VideoStateOptions() { All = true };
        options[VideoEvents.Abort] = option;
        options[VideoEvents.CanPlay] = option;
        options[VideoEvents.CanPlayThrough] = option;
        options[VideoEvents.DurationChange] = option;
        options[VideoEvents.Emptied] = option;
        options[VideoEvents.Ended] = option;
        options[VideoEvents.Error] = option;
        options[VideoEvents.LoadedData] = option;
        options[VideoEvents.LoadedMetadata] = option;
        options[VideoEvents.LoadStart] = option;
        options[VideoEvents.Pause] = option;
        options[VideoEvents.Play] = option;
        options[VideoEvents.Playing] = option;
        options[VideoEvents.Progress] = option;
        options[VideoEvents.RateChange] = option;
        options[VideoEvents.Seeked] = option;
        options[VideoEvents.Seeking] = option;
        options[VideoEvents.Stalled] = option;
        options[VideoEvents.Suspend] = option;
        options[VideoEvents.TimeUpdate] = option;
        options[VideoEvents.VolumeChange] = option;
        options[VideoEvents.Waiting] = option;
    }
    void OnEvent(VideoEventData videoData)
    {
        videoState = videoData.State;
        if (videoData.EventName != VideoEvents.NotSet)
        {
            eventCounter[videoData.EventName]++;
        }
        StateHasChanged();
    } }