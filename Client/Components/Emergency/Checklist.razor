@inject HttpClient Http

@if (Visible)
{
    <div id="kt_quick_cart2" class="offcanvas offcanvas-right p-10 offcanvas-on" style="width:50%">
        <!--begin::Header-->
        <div class="offcanvas-header d-flex align-items-center justify-content-between pb-7" kt-hidden-height="46" style="">
            <h4 class="font-weight-bold m-0">Emergency Check List for @(VehicleNumber)</h4>
            <a @onclick="Close" class="btn btn-xs btn-icon btn-light btn-hover-primary" id="kt_quick_cart_close">
                <i class="ki ki-close icon-xs text-muted"></i>
            </a>
        </div>
        <!--end::Header-->
        <!--begin::Content-->
        <div class="offcanvas-content pr-5 mr-n5 scroll ps ps--active-y">

            <!--begin::Item-->
            <div class="d-flex align-items-center justify-content-between py-4">
                @if (CheckList != null)
                {
                <table class="w-100">
                    <tr class="row px-1 py-2 border-bottom">
                        <td class="col-6 text-dark font-weight-bolder">Description</td>
                        <td class="col-2 text-dark font-weight-bolder">Status</td>
                        <td class="col-2 text-dark font-weight-bolder">Updated</td>
                        <td class="col-2 text-dark font-weight-bolder">Action</td>
                    </tr>
                    @foreach (var item in CheckList)
                    {
                        <tr class="row px-1 py-2 border-bottom">
                            <td class="col-6">@item.Description</td>
                            @if (item.MaintenanceStatus == FMS.Shared.Enums.CheckMaintenanceStatus.NotInitiated)
                            {
                                <td class="col-2 text-danger">Not Initiated</td>
                                <td class="col-2 text-danger"> NA</td>
                                <td class="col-2">
                                    <label class="checkbox checkbox-disabled pb-2">
                                        <input type="checkbox" disabled>
                                        <span></span>
                                    </label>


                                    @if (item.Description.Contains("Bills Posting"))
                                    {
                                        <img class="ml-2" alt="Pic" src="assets/icons/conversation1x.png" @onclick="() => ShowBillPostingModal(item.Id)" />
                                    }
                                    else if (item.Description.Contains("Assigning Workshop"))
                                    {
                                        <img class="ml-2" alt="Pic" src="assets/icons/conversation1x.png" @onclick="() => ShowAssignWorkshopModal(item.Id)" />
                                    }
                                    else
                                    {
                                        <img class="ml-2" alt="Pic" src="assets/icons/conversation1x.png" @onclick="() => ShowCommentModal(item.Id)" />
                                    }
                                </td>
                            }
                            else if (item.MaintenanceStatus == FMS.Shared.Enums.CheckMaintenanceStatus.InProgress)
                            {
                                <td class="col-2 text-info">In Progress</td>
                                <td class="col-2 text-info"> @item.LastUpdated.ToString("dd MMM H:mm")</td>
                                <td class="col-2">
                                    <label class="checkbox checkbox-success pb-2">
                                        <input type="checkbox" @onclick="() => MarkEmergencyPointDone(item.Id)">
                                        <span></span>
                                    </label>


                                    @if (item.Description.Contains("Bills Posting"))
                                    {
                                        <img class="ml-2" alt="Pic" src="assets/icons/conversation1x.png" @onclick="() => ShowBillPostingModal(item.Id)" />
                                    }
                                    else if (item.Description.Contains("Assigning Workshop"))
                                    {
                                        <img class="ml-2" alt="Pic" src="assets/icons/conversation1x.png" @onclick="() => ShowAssignWorkshopModal(item.Id)" />
                                    }
                                    else
                                    {
                                        <img class="ml-2" alt="Pic" src="assets/icons/conversation1x.png" @onclick="() => ShowCommentModal(item.Id)" />
                                    }
                                </td>
                            }
                            else if (item.MaintenanceStatus == FMS.Shared.Enums.CheckMaintenanceStatus.Done)
                            {
                                <td class="col-2 text-success">Done</td>
                                <td class="col-2"> @item.LastUpdated.ToString("dd-MMM-yy")</td>
                                <td class="col-2">
                                    <label class="checkbox checkbox-success pb-2">
                                        <input type="checkbox" checked="checked" disabled>
                                        <span></span>
                                    </label>
                                    @if (item.Description.Contains("Bills Posting"))
                                    {
                                        <img class="ml-2" alt="Pic" src="assets/icons/conversation1x.png" @onclick="() => ShowBillPostingModal(item.Id)" />
                                    }
                                    else if (item.Description.Contains("Assigning Workshop"))
                                    {
                                        <img class="ml-2" alt="Pic" src="assets/icons/conversation1x.png" @onclick="() => ShowAssignWorkshopModal(item.Id)" />
                                    }
                                    else
                                    {
                                        <img class="ml-2" alt="Pic" src="assets/icons/conversation1x.png" @onclick="() => ShowCommentModal(item.Id)" />
                                    }
                                </td>
                            }
                        </tr>
                    }
                </table>
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
            <!--end::Content-->
        </div>

        <div class="offcanvas-footer" kt-hidden-height="112" style="">
            <button class="btn btn-fms mr-2" @onclick="CarOperational">CAR OPERATIONAL</button>
            <button class="btn btn-secondary" @onclick="CloseJob">CLOSE JOB</button>
        </div>
    </div>
}
@if (commentBoxVisible)
{
    <Comments Visible="commentBoxVisible"
              OnVisibilityChanged="ShowHideCommentBox"
              VehicleNumber="@VehicleNumber"
              CheckPointId="@PointId" />
}
@if (billPostingVisible)
{
    <BillPosting Visible="billPostingVisible"
                 OnVisibilityChanged="ShowHideBillPosting"
                 VehicleNumber="@VehicleNumber"
                 CheckPointId="@PointId" />
}

@if (assignWorkShopVisible)
{
    <AssigningWorkshop Visible="assignWorkShopVisible"
                       OnVisibilityChanged="ShowHideAssignWorkshop"
                       VehicleNumber="@VehicleNumber"
                       CheckPointId="@PointId" />
}

<SfDialog Target="#target" Width="500px" ShowCloseIcon="true" @bind-Visible="responseDialogVisibility">
    <DialogTemplates>
        <Header> @responseHeader </Header>
        <Content>
            <p>
                @responseBody
            </p>
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@DialogClose"></DialogEvents>
</SfDialog>
@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public ClaimsPrincipal CurrentUser { get; set; }
    [Parameter]
    public string VehicleNumber { get; set; }
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public EventCallback<bool> OnVisibilityChanged { get; set; }
    [Parameter]
    public List<FMSEmergencyCheckVM> EmergencyCheckList { get; set; }

    public List<FMSEmergencyCheckVM> CheckList { get; set; }

    FMSEmergencyCheckCommentVM EmergencyCheckComment;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        CheckList = EmergencyCheckList;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }
    public async void MarkEmergencyPointDone(Guid pointId)
    {
        EmergencyCheckComment = new FMSEmergencyCheckCommentVM();
        var getMarkEmergencyPointDoneResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Emergency/FMS/CheckList/Point/MarkDone",
            new ApiRequest() { FMSEmergencyCheckId = pointId, VehicleNumber = VehicleNumber });

        if (getMarkEmergencyPointDoneResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            ReloadCheckList();
        }
        else
        {
        }
    }

    public async void ReloadCheckList()
    {
        var vehicleResponse = await Http.PostAsJsonAsync("api/Vehicles/FMS/Demo/GetByNumber", new VehicleVM() { VehicleNumber = VehicleNumber });
        var vehicle = Newtonsoft.Json.JsonConvert.DeserializeObject<VehicleVM>(await vehicleResponse.Content.ReadAsStringAsync());

            var getEmergencyCheckListResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Emergency/FMS/CheckList", new ApiRequest() { VehicleNumber = VehicleNumber });

            if (getEmergencyCheckListResponse.StatusCode == System.Net.HttpStatusCode.OK)
            {
                string response = await (getEmergencyCheckListResponse).Content.ReadAsStringAsync();
                CheckList = JsonConvert.DeserializeObject<List<FMSEmergencyCheckVM>>(response);
            }
            else
            {
            }
 
        StateHasChanged();
    }

    #region Comment Box
    public bool commentBoxVisible { get; set; } = false;
    public ApiRequest PointId { get; set; }
    FMSEmergencyCommentModalVM EmergencyCommentModal;
    public void ShowHideCommentBox()
    {
        commentBoxVisible = !commentBoxVisible;
        if (!commentBoxVisible) ReloadCheckList();
    }
    #endregion
    #region Bill Posting
    public bool billPostingVisible { get; set; } = false;
    public void ShowHideBillPosting()
    {
        billPostingVisible = !billPostingVisible;
        if (!billPostingVisible) ReloadCheckList();
    }
    public void ShowBillPostingModal(Guid pointId)
    {
        PointId = new ApiRequest() { FMSEmergencyCheckId = pointId, Remarks = CheckList.Where(x => x.Id == pointId).FirstOrDefault().Description };
        billPostingVisible = true;
    }
    #endregion
    #region Assign Work Shop
    public bool assignWorkShopVisible { get; set; } = false;

    public void ShowHideAssignWorkshop()
    {
        assignWorkShopVisible = !assignWorkShopVisible;
        if (!assignWorkShopVisible) ReloadCheckList();
    }
    public void ShowAssignWorkshopModal(Guid pointId)
    {
        PointId = new ApiRequest() { FMSEmergencyCheckId = pointId, Remarks = CheckList.Where(x => x.Id == pointId).FirstOrDefault().Description, FMSEmergencyId = CheckList.Where(x => x.Id == pointId).FirstOrDefault().FMSEmergencyId };
        assignWorkShopVisible = true;
    }
    #endregion
    public void ShowCommentModal(Guid pointId)
    {
        PointId = new ApiRequest() { FMSEmergencyCheckId = pointId };
        commentBoxVisible = true;
    }
    public async void CarOperational()
    {
        var vehicleResponse = await Http.PostAsJsonAsync("api/Emergency/CarOperational",
            new ApiRequest() { VehicleNumber = VehicleNumber });
        if (vehicleResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            responseHeader = "Operation Successful";
            responseBody = "Car is marked as operational";
            responseDialogVisibility = true;
        }
        StateHasChanged();
    }
    public async void CloseJob()
    {
        var vehicleResponse = await Http.PostAsJsonAsync("api/Emergency/CloseJob",
            new VehicleVM() { VehicleNumber = VehicleNumber });
        if (vehicleResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {

            responseHeader = "Operation Successful";
            responseBody = "Job is marked as closed.";
            responseDialogVisibility = true;
        }
        StateHasChanged();
    }
    #region Dialog
    public bool responseDialogVisibility { get; set; }
    public string responseHeader { get; set; }
    public string responseBody { get; set; }

    private void DialogClose(CloseEventArgs args)
    {
        Close();
    }
    #endregion
    public Task Close()
    {
        return OnVisibilityChanged.InvokeAsync(false);
    }

}
