@inject HttpClient Http
@inject IJSRuntime JSRuntime

@code {
    [Parameter]
    public FMSAccidentalCommentModalVM AccidentalCommentModal { get; set; }
    [Parameter]
    public ApiRequest CheckPointId { get; set; }
    [Parameter]
    public string VehicleNumber { get; set; }
    [Parameter]
    public EventCallback OnNewCommentModelRequest { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public ClaimsPrincipal CurrentUser { get; set; }

    private DotNetObjectReference<Comments> dotNetObjectReference;

    public List<GBMSUserVM> usersList { get; set; } = new List<GBMSUserVM>();

    FMSAccidentalCheckCommentVM AccidentalCheckComment;

    public bool resetCommentBox { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        dotNetObjectReference = DotNetObjectReference.Create(this);

        NewCommentModel();

        usersList = await Http.GetFromJsonAsync<List<GBMSUserVM>>("api/Users/FMS/All");


        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (usersList != null)
        {
            await JSRuntime.InvokeVoidAsync("mention", dotNetObjectReference, usersList);
        }

        if (!(await authenticationStateTask).User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            CurrentUser = (await authenticationStateTask).User;
        }
        if (AccidentalCommentModal == null)
        {
            NewCommentModel();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    public async void PostAccidentalComment()
    {
        resetCommentBox = true;
        var postCommentResponse = await Http.PostAsJsonAsync<FMSAccidentalCheckCommentVM>("api/Accident/FMS/CheckList/Point/Comment/Add", AccidentalCheckComment);
        if (postCommentResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            NewCommentModel();
            resetCommentBox = false;
            StateHasChanged();
        }
        else
        {
        }

    }

    public async void NewCommentModel()
    {
        try
        {
            await OnNewCommentModelRequest.InvokeAsync();
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    [JSInvokable]
    public void mention_JSInvoked(List<GBMSUserVM> mentionedUsers, string comment)
    {
        if (AccidentalCheckComment != null)
        {
            AccidentalCheckComment.Comment = comment;
            AccidentalCheckComment.Mentions = (string.Join(",", mentionedUsers.Select(x => x.Id).ToArray()));
        }

        StateHasChanged();
    }

}
