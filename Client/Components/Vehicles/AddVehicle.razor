@inject HttpClient Http

@if (Vehicles != null)
{
    <EditForm Model="vehicle" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <div class="card-body">
            <div class="form-group row">
                <div class="col-lg-6">
                    <label>Region:</label>
                    <SfDropDownList TItem="SelectListItem" TValue="string" @bind-Value="vehicle.Region" Placeholder="Select region" AllowFiltering="true" DataSource="@RegionsList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" ValueChange="OnRegionChange"></DropDownListEvents>
                    </SfDropDownList>
                    @*<span class="form-text text-muted">Please select region</span>*@
                    <ValidationMessage For="() => vehicle.Region" />
                </div>
                <div class="col-lg-6">
                    <label>Sub Region:</label>
                    <SfDropDownList TItem="SelectListItem" TValue="string" @bind-Value="vehicle.SubRegion" Placeholder="Select sub region" AllowFiltering="true" DataSource="@SubRegionsList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" ValueChange="OnSubRegionChange"></DropDownListEvents>
                    </SfDropDownList>
                    @*<span class="form-text text-muted">Please select sub region</span>*@
                    <ValidationMessage For="() => vehicle.SubRegion" />
                </div>
            </div>
            <div class="form-group row">
                <div class="col-lg-6">
                    <label>Station:</label>
                    <SfDropDownList TItem="SelectListItem" TValue="string" @bind-Value="vehicle.Station" Placeholder="Select station" AllowFiltering="true" DataSource="@StationsList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        @*<DropDownListEvents TValue="string" ValueChange="OnSubRegionChange"></DropDownListEvents>*@
                    </SfDropDownList>
                    @*<span class="form-text text-muted">Please select sub region</span>*@
                    <ValidationMessage For="() => vehicle.SubRegion" />
                </div>

                <div class="col-lg-6">
                    <label>Vehicles:</label>
                    <SfDropDownList TItem="SelectListItem" TValue="string" @bind-Value="vehicle.VehicleNumber" Placeholder="Select vehicle" AllowFiltering="true" DataSource="@VehiclesList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" ValueChange="OnVehicleNumberChange"></DropDownListEvents>
                    </SfDropDownList>
                    @*<span class="form-text text-muted">Please select vehicle to add</span>*@
                    <ValidationMessage For="() => vehicle.VehicleNumber" />
                </div>
            </div>
            <div class="form-group row">
                <div class="col-lg-6">
                    <label>IMEI Number:</label>
                    <SfTextBox Type="InputType.Number" @bind-Value="vehicle.IMEI" Placeholder="Enter IMEI" class="form-control"></SfTextBox>
                    @*<span class="form-text text-muted">Please enter your contact number</span>*@
                    <ValidationMessage For="() => vehicle.IMEI" />
                </div>
                <div class="col-lg-6">
                    <label>SIM Number:</label>
                    <SfTextBox Type="InputType.Number" @bind-Value="vehicle.SIM" Placeholder="Enter SIM Number" class="form-control"></SfTextBox>
                    <ValidationMessage For="() => vehicle.SIM" />

                    @*<span class="form-text text-muted">Please enter your address</span>*@
                </div>
            </div>
            <div class="form-group row">
                <div class="col-lg-6">
                    <label>Fuel Type:</label>
                    <SfTextBox @bind-Value="vehicle.GasolineType" Placeholder="Select vehicle to populate" Readonly="true" class="form-control"></SfTextBox>
                    @*<span class="form-text text-muted">Please enter your contact number</span>*@
                    <ValidationMessage For="() => vehicle.GasolineType" />
                </div>

                <div class="col-lg-6">
                    <label>PSO Card:</label>
                    <SfTextBox Type="InputType.Number" @bind-Value="vehicle.CardNumber" Placeholder="Enter Card Number" class="form-control"></SfTextBox>
                    <ValidationMessage For="() => vehicle.CardNumber" />
                </div>
            </div>
        </div>
        <div class="card-footer">
            <div class="row">
                <div class="col-lg-6">
                    <button type="submit" class="btn btn-fms mr-2">Save</button>
                    <button type="reset" @onclick="Cancel" class="btn btn-secondary">Cancel</button>
                </div>
            </div>
        </div>
    </EditForm>
}


<SfDialog @bind-Visible="@ResponseDialog" Width="600px" Height="400px" CloseOnEscape="true" Target="#main" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            @dialogHeader
        </Header>
        <Content>
            @dialogBody
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@DialogClose"></DialogEvents>
</SfDialog>


@code {
    [Parameter]
    public EventCallback OnResponse { get; set; }

    public List<GBMSVehicleVM> Vehicles { get; set; }
    public List<SelectListItem> VehiclesList = new List<SelectListItem>();
    public List<SelectListItem> RegionsList = new List<SelectListItem>();
    public List<SelectListItem> SubRegionsList = new List<SelectListItem>();
    public List<SelectListItem> StationsList = new List<SelectListItem>();

    public VehicleVM vehicle = new VehicleVM();

    protected override async Task OnInitializedAsync()
    {
        Vehicles = (await Http.GetFromJsonAsync<List<GBMSVehicleVM>>("api/Vehicles/All"))
                        .ToList();

        VehiclesList = Vehicles.GroupBy(x => x.Description).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key })
                            .ToList();
        RegionsList = Vehicles.GroupBy(x => x.Region).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key })
                        .ToList();
        SubRegionsList = Vehicles.GroupBy(x => x.Subregion).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key })
                    .ToList();
        StationsList = Vehicles.GroupBy(x => x.Station).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key })
                    .ToList();

        await base.OnInitializedAsync();
    }

    public void OnRegionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        SubRegionsList = Vehicles.Where(x => x.Region == args.Value)
            .GroupBy(x => x.Subregion).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        VehiclesList = Vehicles.Where(x => x.Region == args.Value)
            .GroupBy(x => x.Description).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        StateHasChanged();
    }

    public void OnSubRegionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        vehicle.Region = Vehicles.Where(x => x.Subregion == args.Value).FirstOrDefault().Region;
        VehiclesList = Vehicles.Where(x => x.Subregion == args.Value)
            .GroupBy(x => x.Description).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        StateHasChanged();
    }

    public void OnVehicleNumberChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        vehicle.Region = Vehicles.Where(x => x.Description == args.Value).FirstOrDefault().Region;
        vehicle.SubRegion = Vehicles.Where(x => x.Description == args.Value).FirstOrDefault().Subregion;
        vehicle.GasolineType = Vehicles.Where(x => x.Description == args.Value).FirstOrDefault().GasolineType;
        StateHasChanged();
    }

    public async void Save()
    {
        vehicle.Score = 135;
        var response = await Http.PostAsJsonAsync("api/Vehicles/Add", vehicle);
        dialogBody = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            dialogHeader = "Success";
        }
        else
        {
            dialogHeader = "Failed";
        }
        ResponseDialog = true;
        await OnResponse.InvokeAsync();
        vehicle = new VehicleVM();
        StateHasChanged();
    }

    public void Cancel()
    {
        vehicle = new VehicleVM();
    }

    #region Dialog
    public bool ResponseDialog { get; set; }
    public string dialogHeader { get; set; }
    public string dialogBody { get; set; }

    public void DialogClose()
    {
        dialogHeader = null;
        dialogBody = null;
    }
    #endregion

}
