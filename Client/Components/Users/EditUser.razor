@inject HttpClient Http

@if (Visible)
{
    <div id="kt_quick_cart3" class="offcanvas offcanvas-right p-10 offcanvas-on">
        <!--begin::Header-->
        <div class="offcanvas-header d-flex align-items-center justify-content-between pb-7" kt-hidden-height="46" style="">
            <h4 class="font-weight-bold m-0">Edit User</h4>
            <a @onclick="CloseEditUserSideBar" class="btn btn-xs btn-icon btn-light btn-hover-primary" id="kt_quick_cart_close">
                <i class="ki ki-close icon-xs text-muted"></i>
            </a>
        </div>
        <!--end::Header-->
        <!--begin::Content-->
        <div class="offcanvas-content">
            @if (RolesList.Any() && ApplicationUser!=null)
            {
                <div class="offcanvas-wrapper mb-2 scroll-pull scroll ps ps--active-y" style="height: auto;overflow:visible">
                    <div class="d-flex align-items-center justify-content-between py-4">
                        <EditForm Model="ApplicationUser" OnValidSubmit="EditApplicationUser" class="form w-100">
                            <DataAnnotationsValidator />
                            <div class="card-body">
                                <div class="form-group">
                                    <label>Region:</label>
                                    <SfTextBox Type="InputType.Text" @bind-Value="ApplicationUser.Region" Placeholder="Enter Region" Readonly="true"></SfTextBox>
                                    <span class="form-text text-muted">Please select a region.</span>
                                    <ValidationMessage For="() => ApplicationUser.Region" />
                                </div>
                                <div class="form-group">
                                    <label>Sub Region:</label>
                                    <SfTextBox Type="InputType.Text" @bind-Value="ApplicationUser.SubRegion" Placeholder="Enter Sub Region" Readonly="true"></SfTextBox>
                                    <span class="form-text text-muted">Please select a sub region.</span>
                                    <ValidationMessage For="() => ApplicationUser.SubRegion" />
                                </div>
                                <div class="form-group">
                                    <label>User:</label>
                                    <SfTextBox Type="InputType.Text" @bind-Value="ApplicationUser.FullName" Placeholder="Enter Name" Readonly="true"></SfTextBox>
                                    <span class="form-text text-muted">Please select a user.</span>
                                    <ValidationMessage For="() => ApplicationUser.Id" />
                                </div>
                                <div class="form-group">
                                    <label>Enter Department:</label>
                                    <SfTextBox Type="InputType.Text" @bind-Value="ApplicationUser.Department" Placeholder="Enter Department" Readonly="true"></SfTextBox>
                                    <span class="form-text text-muted">Please enter department.</span>
                                    <ValidationMessage For="() => ApplicationUser.Department" />
                                </div>
                                <div class="form-group">
                                    <label>Enter Email:</label>
                                    <SfTextBox Type="InputType.Text" @bind-Value="ApplicationUser.Email" Placeholder="Enter Email"></SfTextBox>
                                    <span class="form-text text-muted">Please enter email.</span>
                                    <ValidationMessage For="() => ApplicationUser.Email" />
                                </div>
                                <div class="form-group">
                                    <label>Enter User Name:</label>
                                    <SfTextBox Type="InputType.Text" @bind-Value="ApplicationUser.Email" Placeholder="Enter User Name" Readonly="true"></SfTextBox>
                                    <span class="form-text text-muted">Please enter user name.</span>
                                    <ValidationMessage For="() => ApplicationUser.UserName" />
                                </div>
                                <div class="form-group">
                                    <label>Enter Password:</label>
                                    <SfTextBox Type="InputType.Password" @bind-Value="ApplicationUser.Password" Placeholder="Enter Password" Readonly="true"></SfTextBox>
                                    <span class="form-text text-muted">Please enter password.</span>
                                    <ValidationMessage For="() => ApplicationUser.Password" />
                                </div>
                                <div class="form-group">
                                    <label>Confirm Password:</label>
                                    <SfTextBox Type="InputType.Password" @bind-Value="ApplicationUser.ConfirmPassword" Placeholder="Enter Password" Readonly="true"></SfTextBox>
                                    <span class="form-text text-muted">Please re enter password.</span>
                                    <ValidationMessage For="() => ApplicationUser.ConfirmPassword" />
                                </div>
                                <div class="form-group">
                                    <label>Select Role:</label>
                                    <SfMultiSelect TValue="List<string>" Mode="@VisualMode.Box" Placeholder="Please Select" DataSource="@RolesList" @bind-Value="ApplicationUser.Roles">
                                        <MultiSelectFieldSettings Text="Role" Value="Id"></MultiSelectFieldSettings>
                                    </SfMultiSelect>
                                    <span class="form-text text-muted">Select role.</span>
                                    <ValidationMessage For="() => ApplicationUser.UserRoles" />
                                </div>
                            </div>
                            <div class="card-footer">
                                <ValidationSummary />
                                <button type="submit" class="btn btn-fms mr-2">Save</button>
                                <button type="reset" class="btn btn-secondary" @onclick="CloseEditUserSideBar">Cancel</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
                <div class="offcanvas-footer" kt-hidden-height="112" style="">
                </div>
            }
            else
            {
                <img style="position:fixed;top:50%;left:70%;" src="assets/media/loading.gif" />
            }
        </div>
    </div>
}
<SfDialog Target="#target" Width="500px" ShowCloseIcon="true" @bind-Visible="responseDialogVisibility">
    <DialogTemplates>
        <Header> @responseHeader </Header>
        <Content>
            <p>
                @responseBody
            </p>
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@DialogClose"></DialogEvents>
</SfDialog>

@code {
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public EventCallback<bool> OnVisibilityChanged { get; set; }
    [Parameter]
    public EventCallback<bool> OnEditSuccess { get; set; }
    [Parameter]
    public FMSApplicationUserVM ApplicationUser { get; set; }
    [Parameter]
    public List<FMSRoleVM> RolesList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task EditApplicationUser()
    {
        var updateResponse = await Http.PostAsJsonAsync("api/Auth/UpdateUser", ApplicationUser);
        if (updateResponse.IsSuccessStatusCode)
        {
            await OnEditSuccess.InvokeAsync(true);

            responseHeader = "Operation Successful";
            responseBody = await updateResponse.Content.ReadAsStringAsync();
            responseDialogVisibility = true;
        }
        else
        {
            responseHeader = "Operation Failed";
            responseBody = await updateResponse.Content.ReadAsStringAsync();
            responseDialogVisibility = true;
        }

    }

    #region Dialog
    public bool responseDialogVisibility { get; set; }
    public string responseHeader { get; set; }
    public string responseBody { get; set; }

    private void DialogClose(CloseEventArgs args)
    {
        CloseEditUserSideBar();
    }
    #endregion


    public Task CloseEditUserSideBar()
    {
        ApplicationUser = new FMSApplicationUserVM();
        return OnVisibilityChanged.InvokeAsync(false);
    }


}
