// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SOS.FMS.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using SOS.FMS.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using SOS.FMS.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using SOS.FMS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using SOS.FMS.Client.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using SOS.FMS.Shared.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Syncfusion.Blazor.Spinner;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Append.Blazor.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using SOS.FMS.Client.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "C:\Users\BA Tech\source\repos\sosfms\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/Index")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 687 "C:\Users\BA Tech\source\repos\sosfms\Client\Pages\Index.razor"
 
    private DotNetObjectReference<Index> dotNetObjectReference;

    #region Filter
    public List<SelectListItem> regionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> subRegionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> vehicleNumbersList { get; set; } = new List<SelectListItem>();

    public FMSVehicleVM Filter = new FMSVehicleVM();

    public List<FMSVehicleVM> filteredVehiclesList { get; set; } = new List<FMSVehicleVM>();

    public async void FilterData()
    {
        filteredVehiclesList = vehiclesList
            .Where(x => (string.IsNullOrEmpty(Filter.Region) || x.Region == Filter.Region))
            .Where(x => (string.IsNullOrEmpty(Filter.SubRegion) || x.SubRegion == Filter.SubRegion))
            .Where(x => (string.IsNullOrEmpty(Filter.VehicleNumber) || x.VehicleNumber == Filter.VehicleNumber))
            .ToList();
        await JSRuntime.InvokeVoidAsync("updateMarkers", dotNetObjectReference, filteredVehiclesList);
        StateHasChanged();
    }

    public async void ResetData()
    {
        Filter = new FMSVehicleVM();
        filteredVehiclesList = vehiclesList;
        await JSRuntime.InvokeVoidAsync("updateMarkers", dotNetObjectReference, filteredVehiclesList);
    }
    #endregion


    public List<FMSVehicleVM> vehiclesList { get; set; } = new List<FMSVehicleVM>();
    public List<GBMSUserVM> usersList { get; set; } = new List<GBMSUserVM>();
    public List<FMSAccidentalCheckCommentVM> commentsList = new List<FMSAccidentalCheckCommentVM>();

    public List<FMSAccidentalCheckVM> accidentalCheckList { get; set; }
    public Guid accidentalId { get; set; }
    public Guid accidentalCheckPointId { get; set; }

    public List<FMSEmergencyCheckVM> emergencyCheckList { get; set; }
    public Guid emergencyId { get; set; }
    public Guid emergencyCheckPointId { get; set; }

    public int AccidentalVehiclesCount { get; set; } = 0;
    public int EmergencyVehiclesCount { get; set; } = 0;
    public int PeriodicVehiclesCount { get; set; } = 0;
    public int MaintainedVehiclesCount { get; set; } = 0;
    public int TotalVehiclesCount { get; set; } = 0;

    public bool emergencyCheckListSideModal { get; set; } = false;
    public bool accidentalCheckListSideModal { get; set; } = false;
    public bool dailyCheckListSideModal { get; set; } = false;

    public string emergencyCheckListVehicleNumber;
    public string accidentalCheckListVehicleNumber;
    public string dailyCheckListVehicleNumber;

    public bool visibleCommentBox { get; set; } = true;

    public bool accidentalCommentModal { get; set; } = false;
    public bool emergencyCommentModal { get; set; } = false;
    FMSAccidentalCommentModalVM AccidentalCommentModal;
    FMSAccidentalCheckCommentVM AccidentalCheckComment;
    FMSEmergencyCommentModalVM EmergencyCommentModal;
    FMSEmergencyCheckCommentVM EmergencyCheckComment;

    public string commentSideModalHeading;

    public string mentionId;

    public string displayImage;

    public void DisplayImage(string item)
    {
        displayImage = item;
    }

    protected override async Task OnInitializedAsync()
    {
        StartTimer();
        dotNetObjectReference = DotNetObjectReference.Create(this);
        vehiclesList = await Http.GetFromJsonAsync<List<FMSVehicleVM>>("api/Vehicles/FMS/Demo/All");
        vehicleNumbersList = vehiclesList.GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        regionsList = vehiclesList.GroupBy(x => x.Region).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        subRegionsList = vehiclesList.GroupBy(x => x.SubRegion).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        filteredVehiclesList = vehiclesList;
        usersList = await Http.GetFromJsonAsync<List<GBMSUserVM>>("api/Users/FMS/All");
        CountVehicles(filteredVehiclesList);
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        mentionId = "mention1";
        await JSRuntime.InvokeVoidAsync("mention", dotNetObjectReference, usersList);
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initialize", dotNetObjectReference, filteredVehiclesList);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public void CountVehicles(List<FMSVehicleVM> vehicles)
    {
        TotalVehiclesCount = 0;
        AccidentalVehiclesCount = 0;
        EmergencyVehiclesCount = 0;
        PeriodicVehiclesCount = 0;
        MaintainedVehiclesCount = 0;
        foreach (var vehicle in vehicles)
        {
            switch (vehicle.Type)
            {
                case "maintained":
                    MaintainedVehiclesCount++;
                    break;
                case "emergency":
                    EmergencyVehiclesCount++;
                    break;
                case "periodic":
                    PeriodicVehiclesCount++;
                    break;
                case "accidental":
                    AccidentalVehiclesCount++;
                    break;
            }
            TotalVehiclesCount++;
        }
    }

    private IList<string> imageDataUrls = new List<string>();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 3;
        var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format,
                100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl =
                $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageDataUrls.Add(imageDataUrl);
        }
    }

    public void closeSideModals()
    {
        HideEmergencyCheckList();
        HideAccidentalCheckList();
        dailyCheckListSideModal = false;
        accidentalCommentModal = false;
        emergencyCommentModal = false;

        dailyCheckListVehicleNumber = null;
        commentSideModalHeading = null;
    }
    public void ShowHideDailyCheckList()
    {
        Description = null;
        dailyCheckListSideModal = !dailyCheckListSideModal;
    }

    public void closeAccidentalCommentModal()
    {
        Accidental_JSInvoked(AccidentalCommentModal.VehicleNumber);
        StateHasChanged();
    }
    public void closeEmergencyCommentModal()
    {
        Emergency_JSInvoked(EmergencyCommentModal.VehicleNumber);
        StateHasChanged();
    }

    public void closeCommentModals()
    {
        accidentalCommentModal = false;

        commentSideModalHeading = null;
    }

    #region JS Invokables
    [JSInvokable]
    public async void Emergency_JSInvoked(string vehicleNumber)
    {
        emergencyCheckListVehicleNumber = vehicleNumber;
        var vehicleResponse = await Http.PostAsJsonAsync("api/Vehicles/FMS/Demo/GetByNumber", new FMSVehicleVM() { VehicleNumber = vehicleNumber });
        var vehicle = Newtonsoft.Json.JsonConvert.DeserializeObject<FMSVehicleVM>(await vehicleResponse.Content.ReadAsStringAsync());
        if (vehicle.Type == "emergency")
        {
            var getEmergencyCheckListResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Emergency/FMS/CheckList", new ApiRequest() { VehicleNumber = vehicleNumber });
            if (getEmergencyCheckListResponse.StatusCode == System.Net.HttpStatusCode.OK)
            {
                string response = await (getEmergencyCheckListResponse).Content.ReadAsStringAsync();
                emergencyCheckList = JsonConvert.DeserializeObject<List<FMSEmergencyCheckVM>>(response);
                ShowEmergencyCheckList(emergencyCheckList);
            }
            else
            {
            }
        }
        else
        {
            ConfirmEmergencyDlgVisible = true;
        }
        StateHasChanged();
    }
    [JSInvokable]
    public async void Accidental_JSInvoked(string vehicleNumber)
    {
        accidentalCheckListVehicleNumber = vehicleNumber;
        var vehicleResponse = await Http.PostAsJsonAsync("api/Vehicles/FMS/Demo/GetByNumber", new FMSVehicleVM() { VehicleNumber = vehicleNumber });
        var vehicle = Newtonsoft.Json.JsonConvert.DeserializeObject<FMSVehicleVM>(await vehicleResponse.Content.ReadAsStringAsync());
        if (vehicle.Type == "accidental")
        {
            var getAccidentalCheckListResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Accident/FMS/CheckList", new ApiRequest() { VehicleNumber = vehicleNumber });

            if (getAccidentalCheckListResponse.StatusCode == System.Net.HttpStatusCode.OK)
            {
                string response = await (getAccidentalCheckListResponse).Content.ReadAsStringAsync();
                accidentalCheckList = JsonConvert.DeserializeObject<List<FMSAccidentalCheckVM>>(response);
                ShowAccidentalCheckList(accidentalCheckList);
            }
            else
            {
            }
        }
        else
        {
            ConfirmAccidentDlgVisible = true;
        }
        StateHasChanged();
    }
    [JSInvokable]
    public void Daily_JSInvoked(string vehicleNumber)
    {
        dailyCheckListVehicleNumber = vehicleNumber;
        ConfirmDailyDlgVisible = true;
        StateHasChanged();
    }
    [JSInvokable]
    public void History_JSInvoked(string vehicleNumber)
    {
    }
    [JSInvokable]
    public void mention_JSInvoked(List<FMSUserVM> mentionedUsers, string comment)
    {
        if (AccidentalCheckComment != null)
        {
            AccidentalCheckComment.Comment = comment;
            AccidentalCheckComment.Mentions = (string.Join(",", mentionedUsers.Select(x => x.Id).ToArray()));
        }
        if (EmergencyCheckComment != null)
        {
            EmergencyCheckComment.Comment = comment;
            EmergencyCheckComment.Mentions = (string.Join(",", mentionedUsers.Select(x => x.Id).ToArray()));
        }

        StateHasChanged();
    }
    #endregion

    #region Timer
    public void StartTimer()
    {
        Timer.SetTimer(5000);
        Timer.OnElapsed += TimerElapsedHandler;
        Console.WriteLine("Markers Sync Started.");
    }

    private async void TimerElapsedHandler()
    {
        vehiclesList = await Http.GetFromJsonAsync<List<FMSVehicleVM>>("api/Vehicles/FMS/Demo/All");
        filteredVehiclesList = vehiclesList;
        FilterData();
        CountVehicles(filteredVehiclesList);
        await JSRuntime.InvokeVoidAsync("updateMarkerPositions", dotNetObjectReference, filteredVehiclesList);
        StateHasChanged();
    }
    #endregion

    #region Dialog

    public bool ConfirmEmergencyDlgVisible { get; set; } = false;
    public bool ConfirmAccidentDlgVisible { get; set; } = false;
    public bool ConfirmDailyDlgVisible { get; set; } = false;

    public string Description { get; set; } = "";

    private void HideDialog(Object e)
    {
        this.ConfirmEmergencyDlgVisible = false;
        this.ConfirmAccidentDlgVisible = false;
        this.ConfirmDailyDlgVisible = false;
    }

    private void DialogClose(CloseEventArgs args)
    {
        this.ConfirmEmergencyDlgVisible = false;
        this.ConfirmAccidentDlgVisible = false;
        this.ConfirmDailyDlgVisible = false;
    }

    public async void ConfirmEmergency()
    {
        var newEmergency = new FMSEmergencyVM()
        {
            VehicleNumber = emergencyCheckListVehicleNumber,
            Description = Description,
            MaintenanceStatus = "Pending"
        };

        var getEmergencyCheckListResponse = await Http.PostAsJsonAsync<FMSEmergencyVM>("api/Emergency/Report", newEmergency);

        if (getEmergencyCheckListResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            string response = await (getEmergencyCheckListResponse).Content.ReadAsStringAsync();
            emergencyCheckList = JsonConvert.DeserializeObject<List<FMSEmergencyCheckVM>>(response);
            ShowEmergencyCheckList(emergencyCheckList);
            this.ConfirmEmergencyDlgVisible = false;
            StateHasChanged();
        }
    }

    public async void ConfirmAccident()
    {
        var newAccident = new FMSAccidentVM()
        {
            VehicleNumber = accidentalCheckListVehicleNumber,
            Description = Description,
            MaintenanceStatus = "Pending"
        };

        var getAccidentalCheckListResponse = await Http.PostAsJsonAsync<FMSAccidentVM>("api/Accident/Report", newAccident);

        if (getAccidentalCheckListResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            string response = await (getAccidentalCheckListResponse).Content.ReadAsStringAsync();
            accidentalCheckList = JsonConvert.DeserializeObject<List<FMSAccidentalCheckVM>>(response);
            ShowAccidentalCheckList(accidentalCheckList);
            this.ConfirmAccidentDlgVisible = false;
            StateHasChanged();
        }
    }

    public void ConfirmDaily()
    {
        this.ConfirmDailyDlgVisible = false;
        dailyCheckListSideModal = true;
    }
    #endregion


    public async void AccidentalCarOperational()
    {
        var vehicleResponse = await Http.PostAsJsonAsync("api/Accident/FMS/Demo/CarOperational",
            new FMSVehicleVM() { VehicleNumber = accidentalCheckListVehicleNumber });
        if (vehicleResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            responseHeader = "Success";
            responseBody = "Car has marked as operational.";
            responseDialogVisibility = true;
            closeSideModals();
        }
        StateHasChanged();
    }
    public async void AccidentalCloseJob()
    {
        var vehicleResponse = await Http.PostAsJsonAsync("api/Accident/FMS/Demo/CloseJob",
            new FMSVehicleVM() { VehicleNumber = accidentalCheckListVehicleNumber });
        if (vehicleResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            responseHeader = "Success";
            responseBody = "Job has marked as closed.";
            responseDialogVisibility = true;
            closeSideModals();
        }
        StateHasChanged();
    }

    public void ShowAccidentalCheckList(List<FMSAccidentalCheckVM> checkVMs)
    {
        accidentalId = checkVMs.FirstOrDefault().FMSAccidentId;
        accidentalCheckListSideModal = true;
        accidentalCommentModal = false;
    }

    public void ShowEmergencyCheckList(List<FMSEmergencyCheckVM> checkVMs)
    {
        emergencyId = checkVMs.FirstOrDefault().FMSEmergencyId;
        emergencyCheckListSideModal = true;
        emergencyCommentModal = false;
    }

    public async void ShowAccidentalCommentModal(Guid pointId)
    {
        closeSideModals();
        commentSideModalHeading = "Comment Box";
        AccidentalCommentModal = null;
        accidentalCommentModal = true;
        AccidentalCheckComment = new FMSAccidentalCheckCommentVM();
        var getFMSAccidentalCommentModalResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Accident/FMS/CheckList/Point", new ApiRequest() { FMSAccidentalCheckId = pointId, VehicleNumber = accidentalCheckListVehicleNumber });

        if (getFMSAccidentalCommentModalResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            string response = await (getFMSAccidentalCommentModalResponse).Content.ReadAsStringAsync();
            AccidentalCommentModal = JsonConvert.DeserializeObject<FMSAccidentalCommentModalVM>(response);
            AccidentalCheckComment.FMSAccidentalCheckId = pointId;
            AccidentalCheckComment.FMSAccidentId = AccidentalCommentModal.FMSAccidentId;
            AccidentalCheckComment.FMSVehicleId = AccidentalCommentModal.FMSVehicleId;
            AccidentalCheckComment.VehicleNumber = AccidentalCommentModal.VehicleNumber;
        }
        else
        {
        }


    }
    public async void MarkAccidentalPointDone(Guid pointId)
    {
        AccidentalCheckComment = new FMSAccidentalCheckCommentVM();
        var getMarkAccidentalPointDoneResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Accident/FMS/CheckList/Point/MarkDone",
            new ApiRequest() { FMSAccidentalCheckId = pointId, VehicleNumber = accidentalCheckListVehicleNumber });

        if (getMarkAccidentalPointDoneResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Accidental_JSInvoked(accidentalCheckListVehicleNumber);
        }
        else
        {
        }
    }
    public async void MarkEmergencyPointDone(Guid pointId)
    {
        EmergencyCheckComment = new FMSEmergencyCheckCommentVM();
        var getMarkEmergencyPointDoneResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Emergency/FMS/CheckList/Point/MarkDone",
            new ApiRequest() { FMSEmergencyCheckId = pointId, VehicleNumber = emergencyCheckListVehicleNumber });

        if (getMarkEmergencyPointDoneResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Emergency_JSInvoked(emergencyCheckListVehicleNumber);
        }
        else
        {
        }

    }
    public async void ShowEmergencyCommentModal(Guid pointId)
    {
        EmergencyCheckComment = new FMSEmergencyCheckCommentVM();
        var getFMSEmergencyCommentModalResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Emergency/FMS/CheckList/Point", new ApiRequest() { FMSEmergencyCheckId = pointId, VehicleNumber = emergencyCheckListVehicleNumber });

        if (getFMSEmergencyCommentModalResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            string response = await (getFMSEmergencyCommentModalResponse).Content.ReadAsStringAsync();
            EmergencyCommentModal = JsonConvert.DeserializeObject<FMSEmergencyCommentModalVM>(response);
            EmergencyCheckComment.FMSEmergencyCheckId = pointId;
            EmergencyCheckComment.FMSEmergencyId = EmergencyCommentModal.FMSEmergencyId;
            EmergencyCheckComment.FMSVehicleId = EmergencyCommentModal.FMSVehicleId;
            EmergencyCheckComment.VehicleNumber = EmergencyCommentModal.VehicleNumber;
        }
        else
        {
        }

        closeSideModals();
        commentSideModalHeading = "Comment Box";

        emergencyCommentModal = true;

    }

    public async void PostAccidentalComment()
    {
        visibleCommentBox = false;
        var postCommentResponse = await Http.PostAsJsonAsync<FMSAccidentalCheckCommentVM>("api/Accident/FMS/CheckList/Point/Comment/Add", AccidentalCheckComment);
        if (postCommentResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            closeSideModals();
            ShowAccidentalCommentModal(AccidentalCheckComment.FMSAccidentalCheckId);
            visibleCommentBox = true;
            StateHasChanged();
        }
        else
        {
        }

    }

    public async void PostEmergencyComment()
    {
        visibleCommentBox = false;
        EmergencyCheckComment.FMSUserId = new Guid("E7BA5D45-5EAC-4195-AB93-1060DF7EE7AE");
        var postCommentResponse = await Http.PostAsJsonAsync<FMSEmergencyCheckCommentVM>("api/Emergency/FMS/CheckList/Point/Comment/Add", EmergencyCheckComment);
        if (postCommentResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            ShowEmergencyCommentModal(EmergencyCheckComment.FMSEmergencyCheckId);
            visibleCommentBox = true;
            StateHasChanged();
            closeSideModals();

        }
        else
        {
        }

    }

    public void HideAccidentalCheckList()
    {
        accidentalCheckListSideModal = false;
        //accidentalCheckListVehicleNumber = null;
        accidentalId = Guid.Empty;
        accidentalCheckList = null;
    }

    public void HideEmergencyCheckList()
    {
        emergencyCheckListSideModal = false;
        //emergencyCheckListVehicleNumber = null;
        emergencyId = Guid.Empty;
        emergencyCheckList = null;
    }
    public async void EmergencyCloseJob()
    {
        var vehicleResponse = await Http.PostAsJsonAsync("api/Emergency/FMS/Demo/CloseJob",
            new ApiRequest() { VehicleNumber = emergencyCheckListVehicleNumber });
        if (vehicleResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            closeSideModals();
        }
        StateHasChanged();
    }

    #region Dialog
    public bool responseDialogVisibility { get; set; }
    public string responseHeader { get; set; }
    public string responseBody { get; set; }

    private void responseDialogClose(CloseEventArgs args)
    {
        //CloseAddUserSideBar();
    }
    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.TimerService Timer { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private INotificationService NotificationService { get; set; }
    }
}
#pragma warning restore 1591
