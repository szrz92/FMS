@page "/Configuration"
@inject HttpClient Http
<!--begin::Subheader-->
<div class="subheader py-2 py-lg-4 subheader-solid" id="kt_subheader">
    <div class="container-fluid d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
        <!--begin::Details-->
        <div class="d-flex align-items-center flex-wrap mr-2">
            <!--begin::Title-->
            <h5 class="text-dark font-weight-bold mt-2 mb-2 mr-5">FMS</h5>
            <!--end::Title-->
            <!--begin::Separator-->
            <div class="subheader-separator subheader-separator-ver mt-2 mb-2 mr-5 bg-gray-200"></div>
            <!--end::Separator-->
            <!--begin::Breadcrumb-->
            <ul class="breadcrumb breadcrumb-transparent breadcrumb-dot font-weight-bold p-0 my-2 font-size-sm">
                <li class="breadcrumb-item">
                    <a href="/" class="text-muted">Configuration</a>
                </li>
            </ul>
            <!--end::Breadcrumb-->
        </div>
        <!--end::Details-->
        <div class="d-flex align-items-center">
            <button class="btn btn-bg-danger text-white mr-2" @onclick="ShowHideAddConfig">Add Configuration</button>
        </div>
    </div>
</div>
<!--end::Subheader-->

<div class="d-flex flex-column-fluid">
    <!--begin::Container-->
    <div class="container-fluid">
        <!--begin::Card-->
        <div class="card card-custom card-stretch">
            <!--begin::Header-->
            @*<div class="card-header flex-wrap border-0 pt-6 pb-0">
                    <div class="card-title">
                        <h3 class="card-label">
                            Accidents
                            <span class="d-block text-muted pt-2 font-size-sm">All Accidents</span>
                        </h3>
                    </div>
                </div>*@
            <!--end::Header-->
            <!--begin::Body-->
            <div class="card-body">
                @if (ConfigurationList != null)
                {
                    <div class="col-lg-12 control-section">
                        <div class="content-wrapper">
                            <div class="row">
                                <div id="container">
                                    <SfGrid ID="ConfigurationGrid" @ref="ConfigurationGrid" DataSource="@ConfigurationList"
                                            AllowPaging="true" AllowSorting="true" AllowFiltering="true"
                                            Height="600" RowHeight="38"
                                            Toolbar="@(new List<string>() { "ExcelExport", "CsvExport", "PdfExport" })"
                                            AllowExcelExport="true" AllowPdfExport="true">
                                        <GridPageSettings PageCount="5" PageSize="20" PageSizes="new int[]{ 5, 10, 20, 50, 100 }"></GridPageSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridSelectionSettings CheckboxOnly="true" PersistSelection="true" Type="SelectionType.Multiple"></GridSelectionSettings>
                                        <GridEvents OnToolbarClick="ConfigurationToolbarClick" TValue="VehicleConfigurationVM"></GridEvents>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(VehicleConfigurationVM.Description) HeaderText="Description" Width="300"></GridColumn>
                                            <GridColumn Field=@nameof(VehicleConfigurationVM.Distance) HeaderText="Distance (km)" Width="130"></GridColumn>
                                            <GridColumn Field=@nameof(VehicleConfigurationVM.Month) HeaderText="Months" Width="230"></GridColumn>
                                            <GridColumn Field=@nameof(VehicleConfigurationVM.PenalityPoints) HeaderText="Point Deduction" Width="130"></GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <h5>Loading.....</h5>
                }
            </div>
            <!--end::Body-->
        </div>
        <!--end::Card-->
    </div>
    <!--end::Container-->
</div>
@if (showAddConfig)
{
    <SOS.FMS.Client.Components.Configuration.AddConfiguration OnVisibilityChanged="ShowHideAddConfig" OnSubmit="Submit" />
}

<SfDialog @bind-Visible="@ResponseDialog" Width="600px" CloseOnEscape="true" Target="#main" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            @dialogHeader
        </Header>
        <Content>
            @dialogBody
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@DialogClose"></DialogEvents>
</SfDialog>

@code {
    public List<VehicleConfigurationVM> ConfigurationList = new List<VehicleConfigurationVM>();

    protected override async Task OnInitializedAsync()
    {
        ConfigurationList = await Http.GetFromJsonAsync<List<VehicleConfigurationVM>>("api/Config/All");
        await base.OnInitializedAsync();
    }

    public async Task Reload()
    {
        ConfigurationList = await Http.GetFromJsonAsync<List<VehicleConfigurationVM>>("api/Config/All");
        StateHasChanged();
    }
    #region Syncfusion

    SfGrid<VehicleConfigurationVM> ConfigurationGrid;

    public void ConfigurationToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "ConfigurationGrid_pdfexport")
        {
            PdfExportProperties Props = new PdfExportProperties();
            Props.PageOrientation = PageOrientation.Landscape;
            Props.PageSize = PdfPageSize.A4;
            this.ConfigurationGrid.PdfExport(Props);
        }
        if (args.Item.Id == "ConfigurationGrid_excelexport")
        {
            this.ConfigurationGrid.ExcelExport();
        }
        if (args.Item.Id == "ConfigurationGrid_csvexport")
        {
            this.ConfigurationGrid.CsvExport();
        }
    }
    #endregion

    #region Add Configuration Item
    public bool showAddConfig { get; set; } = false;
    public async Task ShowHideAddConfig()
    {
        showAddConfig = !showAddConfig;
        if (!showAddConfig) await Reload();
    }
    public async void Submit(VehicleConfigurationVM configuration)
    {
        var response = await Http.PostAsJsonAsync("api/config/add", configuration);
        dialogBody = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            dialogHeader = "Success";
        }
        else
        {
            dialogHeader = "Failed";
        }
        ResponseDialog = true;
        await ShowHideAddConfig();
    }
    #endregion

    #region Dialog
    public bool ResponseDialog { get; set; }
    public string dialogHeader { get; set; }
    public string dialogBody { get; set; }

    public void DialogClose()
    {
        dialogHeader = null;
        dialogBody = null;
    }
    #endregion
}
