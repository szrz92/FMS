@page "/Complaints"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
<!--begin::Subheader-->
<div class="subheader py-2 py-lg-4 subheader-solid" id="kt_subheader">
    <div class="container-fluid d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
        <!--begin::Details-->
        <div class="d-flex align-items-center flex-wrap mr-2">
            <!--begin::Title-->
            <h5 class="text-dark font-weight-bold mt-2 mb-2 mr-5">FMS</h5>
            <!--end::Title-->
            <!--begin::Separator-->
            <div class="subheader-separator subheader-separator-ver mt-2 mb-2 mr-5 bg-gray-200"></div>
            <!--end::Separator-->
            <!--begin::Breadcrumb-->
            <ul class="breadcrumb breadcrumb-transparent breadcrumb-dot font-weight-bold p-0 my-2 font-size-sm">
                <li class="breadcrumb-item">
                    <a href="/" class="text-muted">All Complaints</a>
                </li>
            </ul>
            <!--end::Breadcrumb-->
        </div>
        <!--end::Details-->
        <div class="d-flex align-items-center">
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a region" @bind-Value="Filter.Region" AllowFiltering="true" DataSource="@regionsList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a subregion" @bind-Value="Filter.Subregion" AllowFiltering="true" DataSource="@subRegionsList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a status" @bind-Value="Filter.Status" AllowFiltering="true" DataSource="@statusList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a vehicle" @bind-Value="Filter.VehicleNumber" AllowFiltering="true" DataSource="@vehiclesList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <button class="btn btn-bg-danger text-white mr-2" @onclick="FilterData">FILTER</button>
            <button class="btn btn-bg-info text-white mr-2" @onclick="ResetData">RESET</button>
        </div>
    </div>
</div>
<!--end::Subheader-->

<div class="d-flex flex-column-fluid">
    <!--begin::Container-->
    <div class="container-fluid">
        <!--begin::Card-->
        <div class="card card-custom card-stretch">
            <!--begin::Header-->
            @*<div class="card-header flex-wrap border-0 pt-6 pb-0">
                    <div class="card-title">
                        <h3 class="card-label">
                            Accidents
                            <span class="d-block text-muted pt-2 font-size-sm">All Accidents</span>
                        </h3>
                    </div>
                </div>*@
            <!--end::Header-->
            <!--begin::Body-->
            <div class="card-body">
                @if (FilteredComplaintsList != null)
                {
                    <div class="col-lg-12 control-section">
                        <div class="content-wrapper">
                            <div class="row">
                                <div id="container">
                                    <SfGrid ID="ComplaintsGrid" @ref="ComplaintsGrid" DataSource="@FilteredComplaintsList"
                                            AllowPaging="true" AllowSorting="true" AllowFiltering="true"
                                            Height="600" RowHeight="38"
                                            Toolbar="@(new List<string>() { "ExcelExport", "CsvExport", "PdfExport" })"
                                            AllowExcelExport="true" AllowPdfExport="true">
                                        <GridPageSettings PageCount="5" PageSize="20" PageSizes="new int[]{ 5, 10, 20, 50, 100 }"></GridPageSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridSelectionSettings CheckboxOnly="true" PersistSelection="true" Type="SelectionType.Multiple"></GridSelectionSettings>
                                        <GridEvents OnToolbarClick="ComplaintsToolbarClick" TValue="ComplaintVM"></GridEvents>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ComplaintVM.PointCodeDescription) HeaderText="Point" Width="200"></GridColumn>
                                            <GridColumn Field=@nameof(ComplaintVM.ComplaintDescription) HeaderText="Complaint" Width="250"></GridColumn>
                                            <GridColumn Field=@nameof(ComplaintVM.VehicleNumber) HeaderText="Vehicle" Width="100"></GridColumn>
                                            <GridColumn Field=@nameof(ComplaintVM.DriverName) HeaderText="Driver" Width="100"></GridColumn>
                                            <GridColumn Field=@nameof(ComplaintVM.Region) HeaderText="Region" Width="100"></GridColumn>
                                            <GridColumn Field=@nameof(ComplaintVM.Subregion) HeaderText="Subregion" Width="100"></GridColumn>
                                            <GridColumn Field=@nameof(ComplaintVM.Status) HeaderText="Status" Width="100"></GridColumn>
                                            <GridColumn Field=@nameof(ComplaintVM.ReportTime) Format="dd/MM/yy hh:mm" Type="ColumnType.DateTime" HeaderText="Reported At" Width="150"></GridColumn>
                                            <GridColumn HeaderText="Action" AllowFiltering="false" AllowSorting="false" Width="70">
                                                <Template>
                                                    @{
                                                        var ComplaintInfo = (context as ComplaintVM);
                                                        if (ComplaintInfo.IsActive)
                                                        {
                                                            <button class="btn btn-sm btn-success" @onclick="() => TakeAction(ComplaintInfo.PointCode, ComplaintInfo.VehicleNumber)">ACTION</button>

                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-sm btn-success" @onclick="()=>TakeAction(ComplaintInfo.PointCode, ComplaintInfo.VehicleNumber)" disabled>ACTION</button>

                                                        }
                                                    }
                                                </Template>
                                            </GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <h5>Loading.....</h5>
                }
            </div>
            <!--end::Body-->
        </div>
        <!--end::Card-->
    </div>
    <!--end::Container-->
</div>

<SfDialog @bind-Visible="@ResponseDialog" Width="400px" Target="#target" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            @ConfirmHeader
        </Header>
        <Content>
            @ConfirmBody
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@DialogClose"></DialogEvents>
    <DialogButtons>
        <DialogButton Content="Ok" OnClick="@DialogClose" />
    </DialogButtons>
</SfDialog>
<SfDialog @bind-Visible="@ConfirmDialog" Width="400px" Target="#target" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            @ConfirmHeader
        </Header>
        <Content>
            <span>Brief Description</span>
            <span class="e-input-group w-100">
                <input type="text" name="Required" @bind-value="Resolution" class="e-input w-100">
            </span>
            @ConfirmBody
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@DialogClose"></DialogEvents>
    <DialogButtons>
        <DialogButton Content="Ok" OnClick="@ConfirmResolution" />
    </DialogButtons>
</SfDialog>
@code {
    public List<ComplaintVM> ComplaintsList { get; set; }
    public List<ComplaintVM> FilteredComplaintsList { get; set; }

    public List<SelectListItem> regionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> subRegionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> vehiclesList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> statusList { get; set; } = new List<SelectListItem>();
    public ComplaintVM Filter { get; set; } = new ComplaintVM();
    public void FilterData()
    {
        FilteredComplaintsList = ComplaintsList
    .Where(x => (string.IsNullOrEmpty(Filter.Region) || x.Region == Filter.Region))
    .Where(x => (string.IsNullOrEmpty(Filter.Subregion) || x.Subregion == Filter.Subregion))
    .Where(x => (string.IsNullOrEmpty(Filter.VehicleNumber) || x.VehicleNumber == Filter.VehicleNumber))
    .Where(x => (string.IsNullOrEmpty(Filter.Status) || x.Status == Filter.Status))
    .ToList();
    }

    public void ResetData()
    {
        Filter = new ComplaintVM();
        FilteredComplaintsList = ComplaintsList;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetActiveComplaints();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    #region Syncfusion

    SfGrid<ComplaintVM> ComplaintsGrid;

    public void ComplaintsToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "ComplaintsGrid_pdfexport")
        {
            PdfExportProperties Props = new PdfExportProperties();
            Props.PageOrientation = PageOrientation.Landscape;
            Props.PageSize = PdfPageSize.A4;
            this.ComplaintsGrid.PdfExport(Props);
        }
        if (args.Item.Id == "ComplaintsGrid_excelexport")
        {
            this.ComplaintsGrid.ExcelExport();
        }
        if (args.Item.Id == "ComplaintsGrid_csvexport")
        {
            this.ComplaintsGrid.CsvExport();
        }
    }
    #endregion

    #region Dialog
    public bool ResponseDialog { get; set; } = false;
    public bool ConfirmDialog { get; set; } = false;
    public string ConfirmHeader { get; set; }
    public string ConfirmBody { get; set; }

    public void DialogClose()
    {
        ResponseDialog = false;
        ConfirmDialog = false;

        ConfirmHeader = null;
        ConfirmBody = null;

        PointCodeToMaintain = null;
        VehicleNumberToMaintain = null;
    }
    #endregion

    public string PointCodeToMaintain { get; set; }
    public string VehicleNumberToMaintain { get; set; }

    public void TakeAction(string PointCode, string VehicleNumber)
    {
        PointCodeToMaintain = PointCode;
        VehicleNumberToMaintain = VehicleNumber;

        ConfirmHeader = "Confirmation";
        ConfirmBody = $"Are you sure to mark selected complaint against Vehicle {VehicleNumber} as resolved?";

        ConfirmDialog = true;
        StateHasChanged();
    }

    public string Resolution { get; set; }

    public async void ConfirmResolution()
    {
        var resolutionResponse = await Http.PostAsJsonAsync("api/complaints/resolve", new ApiRequest() { CheckListPointCode = PointCodeToMaintain, VehicleNumber = VehicleNumberToMaintain, Remarks = Resolution });
        if (resolutionResponse.IsSuccessStatusCode)
        {
            DialogClose();

            ConfirmHeader = "Success";
            ConfirmBody = await resolutionResponse.Content.ReadAsStringAsync();
            ResponseDialog = true;


            await GetActiveComplaints();
        }
        else
        {
            DialogClose();

            ConfirmHeader = "Failed";
            ConfirmBody = await resolutionResponse.Content.ReadAsStringAsync();
            ResponseDialog = true;
        }
        StateHasChanged();
    }

    public async Task GetActiveComplaints()
    {
        ComplaintsList = (await Http.GetFromJsonAsync<List<ComplaintVM>>("api/complaints/all"))
        .OrderByDescending(x => x.ReportTime)
        .ToList();
        FilteredComplaintsList = ComplaintsList;
        regionsList = ComplaintsList.GroupBy(x => x.Region).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        subRegionsList = ComplaintsList.GroupBy(x => x.Subregion).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        statusList = ComplaintsList.GroupBy(x => x.Status).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        vehiclesList = ComplaintsList.GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
    }
}
