@page "/Daily"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
<!--begin::Subheader-->
<div class="subheader py-2 py-lg-4 subheader-solid" id="kt_subheader">
    <div class="container-fluid d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
        <!--begin::Details-->
        <div class="d-flex align-items-center flex-wrap mr-2">
            <!--begin::Title-->
            <h5 class="text-dark font-weight-bold mt-2 mb-2 mr-5">FMS</h5>
            <!--end::Title-->
            <!--begin::Separator-->
            <div class="subheader-separator subheader-separator-ver mt-2 mb-2 mr-5 bg-gray-200"></div>
            <!--end::Separator-->
            <!--begin::Breadcrumb-->
            <ul class="breadcrumb breadcrumb-transparent breadcrumb-dot font-weight-bold p-0 my-2 font-size-sm">
                <li class="breadcrumb-item">
                    <a href="/" class="text-muted">Daily Maintenance Information</a>
                </li>
            </ul>
            <!--end::Breadcrumb-->
        </div>
        <!--end::Details-->
        <div class="d-flex align-items-center">
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a region" @bind-Value="Filter.Region" AllowFiltering="true" DataSource="@regionsList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" ValueChange="OnRegionChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a subregion" @bind-Value="Filter.Subregion" AllowFiltering="true" DataSource="@subRegionsList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" ValueChange="OnSubRegionChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a status" @bind-Value="Filter.Status" AllowFiltering="true" DataSource="@statusList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" ValueChange="OnStatusChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a vehicle" @bind-Value="Filter.VehicleNumber" AllowFiltering="true" DataSource="@vehiclesList">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <button class="btn btn-bg-danger text-white mr-2" @onclick="FilterData">FILTER</button>
            <button class="btn btn-bg-info text-white mr-2" @onclick="ResetData">RESET</button>
        </div>
    </div>
</div>
<!--end::Subheader-->

<div class="d-flex flex-column-fluid">
    <!--begin::Container-->
    <div class="container-fluid">
        <!--begin::Card-->
        <div class="card card-custom card-stretch">
            <!--begin::Header-->
            @*<div class="card-header flex-wrap border-0 pt-6 pb-0">
                <div class="card-title">
                    <h3 class="card-label">
                        Daily
                        <span class="d-block text-muted pt-2 font-size-sm">All Daily Maintenance</span>
                    </h3>
                </div>
            </div>*@
            <!--end::Header-->
            <!--begin::Body-->
            <div class="card-body">
                @if (FilteredDailyChecksList != null)
                {
                    <div class="col-lg-12 control-section">
                        <div class="content-wrapper">
                            <div class="row">
                                <div id="container">
                                    <SfGrid ID="DailyGrid" @ref="DailyGrid" DataSource="@FilteredDailyChecksList"
                                            AllowPaging="true" AllowSorting="true" AllowFiltering="true"
                                            Height="600" RowHeight="38"
                                            Toolbar="@(new List<string>() { "ExcelExport", "CsvExport", "PdfExport", "Search"})"
                                            AllowExcelExport="true" AllowPdfExport="true">
                                        <GridPageSettings PageCount="5" PageSize="20" PageSizes="new int[]{ 5, 10, 20, 50, 100 }"></GridPageSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridSelectionSettings CheckboxOnly="true" PersistSelection="true" Type="SelectionType.Multiple"></GridSelectionSettings>
                                        <GridEvents OnToolbarClick="DailyToolbarClick" TValue="FMSDailyCheckListVM"></GridEvents>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(FMSDailyCheckListVM.DriverName) TextAlign="TextAlign.Center" HeaderText="Driver" Width="130"></GridColumn>
                                            <GridColumn Field=@nameof(FMSDailyCheckListVM.VehicleNumber) HeaderText="Vehicle Number" Width="130"></GridColumn>
                                            <GridColumn Field=@nameof(FMSDailyCheckListVM.Category) HeaderText="Category" Width="130"></GridColumn>
                                            <GridColumn Field=@nameof(FMSDailyCheckListVM.SubCategeory) HeaderText="Subcategory" Width="130"></GridColumn>
                                            <GridColumn Field=@nameof(FMSDailyCheckListVM.Region) HeaderText="Region" Width="130"></GridColumn>
                                            <GridColumn Field=@nameof(FMSDailyCheckListVM.Subregion) HeaderText="Subregion" Width="130"></GridColumn>
                                            <GridColumn Field=@nameof(FMSDailyCheckListVM.Status) HeaderText="Status" Width="130"></GridColumn>
                                            <GridColumn Field=@nameof(FMSDailyCheckListVM.LastUpdated) HeaderText="Last Updated" Width="130"></GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <h5>Loading.....</h5>
                }
            </div>
            <!--end::Body-->
        </div>
        <!--end::Card-->
    </div>
    <!--end::Container-->
</div>

@code {
    public List<FMSDailyCheckListVM> DailyChecksList { get; set; }
    public List<FMSDailyCheckListVM> FilteredDailyChecksList { get; set; }
    public List<SelectListItem> regionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> subRegionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> statusList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> vehiclesList { get; set; } = new List<SelectListItem>();

    public FMSDailyCheckListVM Filter { get; set; } = new FMSDailyCheckListVM();

    protected override async Task OnInitializedAsync()
    {
        DailyChecksList = (await Http.GetFromJsonAsync<List<FMSDailyCheckListVM>>("api/Daily/All"))
                                .OrderByDescending(x => x.LastUpdated)
                                .ToList();
        FilteredDailyChecksList = DailyChecksList;
        regionsList = DailyChecksList.GroupBy(x => x.Region).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        subRegionsList = DailyChecksList.GroupBy(x => x.Subregion).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        statusList = DailyChecksList.GroupBy(x => x.Status).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        vehiclesList = DailyChecksList.GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        await base.OnInitializedAsync();
    }

    public async Task OnRegionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        subRegionsList = DailyChecksList.Where(x => x.Region == args.Value).GroupBy(x => x.Subregion).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        statusList = DailyChecksList.Where(x => x.Region == args.Value).GroupBy(x => x.Status).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        vehiclesList = DailyChecksList.Where(x => x.Region == args.Value).GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        StateHasChanged();
    }
    public async Task OnSubRegionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        statusList = DailyChecksList.Where(x => x.Subregion == args.Value).GroupBy(x => x.Status).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        vehiclesList = DailyChecksList.Where(x => x.Subregion == args.Value).GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        StateHasChanged();
    }
    public async Task OnStatusChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        vehiclesList = DailyChecksList
            .Where(x => x.Status == args.Value && (string.IsNullOrEmpty(Filter.Subregion) || x.Subregion == Filter.Subregion))
            .GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    public void FilterData()
    {
        FilteredDailyChecksList = DailyChecksList
            .Where(x => (string.IsNullOrEmpty(Filter.Region) || x.Region == Filter.Region))
            .Where(x=> (string.IsNullOrEmpty(Filter.Subregion) || x.Subregion == Filter.Subregion))
            .Where(x=> (string.IsNullOrEmpty(Filter.Status) || x.Status == Filter.Status))
            .Where(x=> (string.IsNullOrEmpty(Filter.VehicleNumber) || x.VehicleNumber == Filter.VehicleNumber))
            .ToList();
    }

    public void ResetData()
    {
        Filter = new FMSDailyCheckListVM();
        FilteredDailyChecksList = DailyChecksList;
    }

    #region Syncfusion

    SfGrid<FMSDailyCheckListVM> DailyGrid;

    public void DailyToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "DailyGrid_pdfexport")
        {
            PdfExportProperties Props = new PdfExportProperties();
            Props.PageOrientation = PageOrientation.Landscape;
            Props.PageSize = PdfPageSize.A4;
            this.DailyGrid.PdfExport(Props);
        }
        if (args.Item.Id == "DailyGrid_excelexport")
        {
            this.DailyGrid.ExcelExport();
        }
        if (args.Item.Id == "DailyGrid_csvexport")
        {
            this.DailyGrid.CsvExport();
        }
    }
    #endregion
}