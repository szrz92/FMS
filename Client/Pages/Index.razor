@page "/"
@page "/Index"
@inject IJSRuntime JSRuntime
@inject Services.TimerService Timer
@inject HttpClient Http
    <!-- Bootstrap -->
<link href="assets/js/mentions/css/jquery.mentiony.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css">
<style>
    /*textarea {*/
    /*width: 100%*/
    /*}

    .mentiony-container, .mentiony-content {*/
    /*width: 100% !important;*/
    /*}*/

    .demo-item {
        height: 300px;
    }

        .demo-item .demo, .demo-item .demo > * {
            height: 100%;
        }

        .demo-item .code, .demo-item .code > * {
            height: 100%;
        }

            .demo-item .code, .demo-item .code > pre > code {
                padding: 0;
                background: none
            }

                .demo-item .code > pre > code {
                    width: 999px !important;
                    display: block;
                }

    pre.prettyprint {
        background-color: #693d3d !important;
    }

    #legend {
        font-family: Arial, sans-serif;
        background: #fff;
        padding: 10px;
        margin: 10px;
        /*border: 3px solid #000;*/
    }

        #legend img {
            vertical-align: middle;
        }

        #legend td {
            padding: 0.3rem;
        }
</style>

<!--begin::Subheader-->
<div class="subheader py-2 py-lg-4  subheader-solid " id="kt_subheader">
    <div class=" container-fluid  d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
        <div class="d-flex align-items-center flex-wrap mr-2">
            <h5 class="text-dark font-weight-bold mt-2 mb-2 mr-5">
                Dashboard
            </h5>
            <div class="subheader-separator subheader-separator-ver mt-2 mb-2 mr-5 bg-gray-200"></div>

        </div>
        <div class="d-flex align-items-center">
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a region" AllowFiltering="true" DataSource="@regionsList" @bind-Value="Filter.Region">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a subregion" AllowFiltering="true" DataSource="@subRegionsList" @bind-Value="Filter.SubRegion">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a vehicle" AllowFiltering="true" DataSource="@vehicleNumbersList" @bind-Value="Filter.VehicleNumber">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <button class="btn btn-bg-danger text-white mr-2" @onclick="FilterData">FILTER</button>
            <button class="btn btn-bg-info text-white mr-2" @onclick="ResetData">RESET</button>
        </div>
    </div>
</div>
<div class="d-flex flex-column-fluid mt-4">
    <!--begin::Container-->
    <div class="container-fluid h-100">
        <div class="row d-flex">
            <div class="col-sm-7 col-md-8 col-lg-8 col-xl-10">
                <div id="map" class="container-fluid" style="height:85vh;"></div>
                <div id="legend">
                    <table class="table table-borderless p-0" style="display: table-row;">
                        <tr>
                            <td>
                                <p style="color: #00CB14">Maintained</p>
                            </td>
                            <td>
                                <img style="float:right; height:70%;" src="assets/icons/Maintained1x.png">
                            </td>
                            <td>
                                <p style="color: #00CB14">@MaintainedVehiclesCount</p>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <p style="color: #FF6F00">Periodic</p>
                            </td>
                            <td>
                                <img style="float:right; height:70%;" src="assets/icons/Periodic1x.png">
                            </td>
                            <td>
                                <p style="color: #FF6F00">@PeriodicVehiclesCount</p>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <p style="color: #DFBB0B">Emergency</p>
                            </td>
                            <td>
                                <img style="float:right; height:70%;" src="assets/icons/Emergency1x.png">
                            </td>
                            <td>
                                <p style="color: #DFBB0B">@EmergencyVehiclesCount</p>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <p style="color: #FF0000">Accidental</p>
                            </td>
                            <td>
                                <img style="float:right; height:70%;" src="assets/icons/Accidental1x.png">
                            </td>
                            <td>
                                <p style="color: #FF0000">@AccidentalVehiclesCount</p>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="col-sm-5 col-md-4 col-lg-4 col-xl-2" style="height:80vh;overflow-y:scroll;">
                <div class="row">
                    <JobsCount Accidents="@AccidentalVehiclesCount" Emergency="@EmergencyVehiclesCount" Periodic="@PeriodicVehiclesCount" />
                    <CompletedJobsCount />
                    <PendingJobsCount />
                    <PendingSoonJobsCount />
                    <ActiveComplaintsCount />
                </div>
            </div>
        </div>
    </div>
</div>

@if (emergencyCheckListSideModal)
{
    <div id="kt_quick_cart1" class="offcanvas offcanvas-right p-10 offcanvas-on" style="width:50%">
        <!--begin::Header-->
        <div class="offcanvas-header d-flex align-items-center justify-content-between pb-7" kt-hidden-height="46" style="">
            <h4 class="font-weight-bold m-0">Emergency Check List for @(emergencyCheckListVehicleNumber ?? "")</h4>
            <a @onclick="closeSideModals" class="btn btn-xs btn-icon btn-light btn-hover-primary" id="kt_quick_cart_close">
                <i class="ki ki-close icon-xs text-muted"></i>
            </a>
        </div>
        <!--end::Header-->
        <!--begin::Content-->
        <div class="offcanvas-content pr-5 mr-n5 scroll ps ps--active-y">

            <!--begin::Item-->
            <div class="d-flex align-items-center justify-content-between py-4">
                @if (emergencyCheckList != null)
                {
                    <table class="w-100">
                        @foreach (var item in emergencyCheckList)
                        {
                            <tr class="row px-1 py-2 border-bottom">
                                <td class="col-6">@item.Description</td>
                                @if (item.MaintenanceStatus == FMS.Shared.Enums.MaintenanceStatus.InProgress)
                                {
                                    <td class="col-2 text-danger">(@(item.MaintenanceStatus))</td>
                                    <td class="col-2 text-danger"> NA</td>
                                    <td class="col-2">
                                        @if (item.CommentCount == 0)
                                        {
                                            <label class="checkbox checkbox-disabled pb-2">
                                                <input type="checkbox" disabled>
                                                <span></span>
                                            </label>
                                        }
                                        else
                                        {
                                            <label class="checkbox checkbox-success pb-2">
                                                <input type="checkbox" @onclick="() => MarkEmergencyPointDone(item.Id)">
                                                <span></span>
                                            </label>
                                        }

                                        <img class="ml-2" alt="Pic" src="assets/icons/conversation1x.png" @onclick="() => ShowEmergencyCommentModal(item.Id)" />
                                    </td>
                                }
                                else
                                {
                                    <td class="col-2 text-success">(@(item.MaintenanceStatus))</td>
                                    <td class="col-2"> @item.LastUpdated.ToString("dd-MMM-yy")</td>
                                    <td class="col-2">
                                        <label class="checkbox checkbox-success pb-2">
                                            <input type="checkbox" checked="checked">
                                            <span></span>
                                        </label>

                                        <img class="ml-2" alt="Pic" src="assets/icons/conversation1x.png" @onclick="() => ShowEmergencyCommentModal(item.Id)" />
                                    </td>
                                }
                            </tr>
                        }
                    </table>
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
            <!--end::Content-->
        </div>

        <div class="offcanvas-footer" kt-hidden-height="112" style="">
            <button class="btn btn-fms" @onclick="EmergencyCloseJob">CLOSE JOB</button>
        </div>
    </div>
}
@if (accidentalCheckListSideModal)
{
    <div id="kt_quick_cart2" class="offcanvas offcanvas-right p-10 offcanvas-on" style="width:50%">
        <!--begin::Header-->
        <div class="offcanvas-header d-flex align-items-center justify-content-between pb-7" kt-hidden-height="46" style="">
            <h4 class="font-weight-bold m-0">Accidental Check List for @(accidentalCheckListVehicleNumber ?? "")</h4>
            <a @onclick="closeSideModals" class="btn btn-xs btn-icon btn-light btn-hover-primary" id="kt_quick_cart_close">
                <i class="ki ki-close icon-xs text-muted"></i>
            </a>
        </div>
        <!--end::Header-->
        <!--begin::Content-->
        <div class="offcanvas-content pr-5 mr-n5 scroll ps ps--active-y">

            <!--begin::Item-->
            <div class="d-flex align-items-center justify-content-between py-4">
                @if (accidentalCheckList != null)
                {
                    <table class="w-100">
                        @foreach (var item in accidentalCheckList)
                        {
                            <tr class="row px-1 py-2 border-bottom">
                                <td class="col-6">@item.Description</td>
                                @if (item.MaintenanceStatus == FMS.Shared.Enums.MaintenanceStatus.InProgress)
                                {
                                    <td class="col-2 text-danger">(@(item.MaintenanceStatus))</td>
                                    <td class="col-2 text-danger"> NA</td>
                                    <td class="col-2">
                                        @if (item.CommentCount == 0)
                                        {
                                            <label class="checkbox checkbox-disabled pb-2">
                                                <input type="checkbox" disabled>
                                                <span></span>
                                            </label>
                                        }
                                        else
                                        {
                                            <label class="checkbox checkbox-success pb-2">
                                                <input type="checkbox" @onclick="() => MarkAccidentalPointDone(item.Id)">
                                                <span></span>
                                            </label>
                                        }

                                        <img class="ml-2" alt="Pic" src="assets/icons/conversation1x.png" @onclick="() => ShowAccidentalCommentModal(item.Id)" />
                                    </td>
                                }
                                else
                                {
                                    <td class="col-2 text-success">(@(item.MaintenanceStatus))</td>
                                    <td class="col-2"> @item.LastUpdated.ToString("dd-MMM-yy")</td>
                                    <td class="col-2">
                                        <label class="checkbox checkbox-success pb-2">
                                            <input type="checkbox" checked="checked" disabled>
                                            <span></span>
                                        </label>

                                        <img class="ml-2" alt="Pic" src="assets/icons/conversation1x.png" @onclick="() => ShowAccidentalCommentModal(item.Id)" />
                                    </td>
                                }
                            </tr>
                        }
                    </table>
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
            <!--end::Content-->
        </div>

        <div class="offcanvas-footer" kt-hidden-height="112" style="">
            <button class="btn btn-fms mr-2" @onclick="AccidentalCarOperational">CAR OPERATIONAL</button>
            <button class="btn btn-secondary" @onclick="AccidentalCloseJob">CLOSE JOB</button>
        </div>
    </div>
}

@if (dailyCheckListSideModal)
{
    <DailyCheckList OnVisibilityChanged="ShowHideDailyCheckList" Visible="@dailyCheckListSideModal" VehicleNumber="@dailyCheckListVehicleNumber" />

}


@if (accidentalCommentModal)
{
    <div id="kt_quick_cart" class="offcanvas offcanvas-right p-10 offcanvas-on" style="width:50%">
        @if (AccidentalCommentModal != null)
        {
            <!--begin::Header-->
            <div class="offcanvas-header d-flex align-items-center justify-content-between pb-7" kt-hidden-height="46" style="">
                <h4 class="font-weight-bold m-0">@AccidentalCommentModal.CheckPointName</h4>
                <a @onclick="closeAccidentalCommentModal" class="btn btn-xs btn-icon btn-light btn-hover-primary" id="kt_quick_cart_close">
                    <i class="ki ki-close icon-xs text-muted"></i>
                </a>
            </div>
            <!--end::Header-->
            <!--begin::Content-->
            <div class="offcanvas-content pr-5 mr-n5 scroll ps ps--active-y">
                <div class="d-flex flex-column-fluid">
                    <!--begin::Container-->
                    <div class="container pl-0">
                        <!--begin::Chat-->
                        <div class="row">
                            <div class="col-xl-7">
                                <div class="container">
                                    <div class="card border border-secondary">
                                        <div class="card-header">
                                            <div class="card-title mb-0 font-weight-bolder">Comments</div>
                                        </div>
                                        <!--begin::Body-->
                                        <div class="card-body">
                                            <div class="scrollable" style="overflow-y: auto; max-height: 300px;">
                                                <!--begin::Messages-->
                                                <div class="messages">
                                                    @foreach (var comment in AccidentalCommentModal.Comments)
                                                    {
                                                        <!--begin::Message In-->
                                                        <div class="d-flex flex-column mb-5 align-items-start">
                                                            <div class="d-flex align-items-center">
                                                                <div>
                                                                    <a href="#" class="text-dark-75 text-hover-primary font-weight-bold font-size-lg">@comment.FMSUserName</a>
                                                                    <span class="text-muted font-size-sm">@comment.LastUpdated</span>
                                                                </div>
                                                            </div>
                                                            <div class="mt-2 rounded p-5 bg-light-secondary text-dark-50 font-weight-bold font-size-sm text-left w-90">@comment.Comment</div>
                                                        </div>
                                                        <!--end::Message In-->
                                                    }
                                                </div>
                                                <!--end::Messages-->
                                            </div>
                                        </div>
                                        <!--end::Body-->
                                        <div class="card-footer p-0">
                                            @if (visibleCommentBox)
                                            {
                                                <div class="input-group p-2">
                                                    <textarea id="@mentionId" class="form-control" placeholder="Type comment here."
                                                              style="resize: none" rows="3" aria-label="With textarea"></textarea>
                                                    <div class="input-group-append">
                                                        <span class="input-group-text btn btn-fms" @onclick="PostAccidentalComment">Post</span>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="row">
                                        @*<div class="input-group border border-secondary">
                                                <textarea id="@mentionId" class="form-control custom-control"
                                                          style="resize: none" rows="3"></textarea>
                                            </div>
                                            <span class="input-group-append btn btn-fms">Comment</span>*@
                                    </div>
                                    <div class="row pl-4">
                                        @foreach (var i in imageDataUrls)
                                        {
                                            <div class="col-3 mb-2 p-2">
                                                <img src="@i" style="width:90%;height:auto;" @onclick="() => DisplayImage(i)" />
                                            </div>
                                        }
                                        <div class="col-3 mb-2 p-2">
                                            <div class="d-flex" style="display: flex; align-items: flex-start; justify-content: flex-end; width: 100%;">
                                                <div class="mr-3">
                                                    <div class="container1">
                                                        <div class="button-wrap">
                                                            <label class="btn btn-fms btn-md text-uppercase font-weight-bold chat-send py-8 px-6" for="upload">Upload File</label>
                                                            <InputFile id="upload" OnChange="@OnInputFileChange" style=" display:none; position: absolute; z-index: -3; top: 15px; left: 20px; font-size: 17px; color: #b8b8b8;" multiple />
                                                        </div>
                                                    </div>
                                                </div>
                                                <div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-5">
                                <div class="row">
                                    <div class="card">
                                        <div class="card-header">
                                            <div class="card-title mb-0 font-weight-bolder">History</div>
                                        </div>
                                        <div class="card-body">
                                            <div class="row">
                                                <div class="col-xl-4">
                                                    <a href="#" class="btn btn-fms-emergency font-weight-boldest font-size-sm px-2 py-5">EMERGENCY <br /> 15 JOBS</a>
                                                </div>
                                                <div class="col-xl-4">
                                                    <a href="#" class="btn btn-fms font-weight-boldest font-size-sm px-2 py-5">ACCIDENTAL <br /> 15 JOBS</a>
                                                </div>
                                                <div class="col-xl-4">
                                                    <a href="#" class="btn btn-fms-daily font-weight-boldest font-size-sm px-5 py-5 w-100">DAILY <br /> 15 JOBS</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <hr />
                                <div class="row">
                                    <div class="col-xl-12">
                                        <div class="card">
                                            <div class="card-header">
                                                <div class="card-title mb-0 font-weight-bolder">Photo Viewer</div>
                                            </div>
                                            <div class="card-body">
                                                <div class="h-50">
                                                    <img src="@displayImage" style="width:99%;height:auto;" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!--end::Chat-->
                    </div>
                    <!--end::Container-->
                </div>
                <!--end::Content-->
            </div>
        }
        else
        {
            <img style="position:fixed;top:50%;left:70%;" src="assets/media/loading.gif" />
        }
    </div>

}
@if (emergencyCommentModal)
{
    <div id="kt_quick_cart" class="offcanvas offcanvas-right p-10 offcanvas-on" style="width:50%">
        @if (EmergencyCommentModal != null)
        {
            <!--begin::Header-->
            <div class="offcanvas-header d-flex align-items-center justify-content-between pb-7" kt-hidden-height="46" style="">
                <h4 class="font-weight-bold m-0">@EmergencyCommentModal.CheckPointName</h4>
                <a @onclick="closeEmergencyCommentModal" class="btn btn-xs btn-icon btn-light btn-hover-primary" id="kt_quick_cart_close">
                    <i class="ki ki-close icon-xs text-muted"></i>
                </a>
            </div>
            <!--end::Header-->
            <!--begin::Content-->
            <div class="offcanvas-content pr-5 mr-n5 scroll ps ps--active-y">
                <div class="d-flex flex-column-fluid">
                    <!--begin::Container-->
                    <div class="container pl-0">
                        <!--begin::Chat-->
                        <div class="row">
                            <div class="col-xl-7">
                                <div class="container">
                                    <div class="card border border-secondary">
                                        <div class="card-header">
                                            <div class="card-title mb-0 font-weight-bolder">Comments</div>
                                        </div>
                                        <!--begin::Body-->
                                        <div class="card-body">
                                            <div class="scrollable" style="overflow-y: auto; max-height: 300px;">
                                                <!--begin::Messages-->
                                                <div class="messages">
                                                    @foreach (var comment in EmergencyCommentModal.Comments)
                                                    {
                                                        <!--begin::Message In-->
                                                        <div class="d-flex flex-column mb-5 align-items-start">
                                                            <div class="d-flex align-items-center">
                                                                <div>
                                                                    <a href="#" class="text-dark-75 text-hover-primary font-weight-bold font-size-lg">@comment.Name</a>
                                                                    <span class="text-muted font-size-sm">@comment.LastUpdated</span>
                                                                </div>
                                                            </div>
                                                            <div class="mt-2 rounded p-5 bg-light-secondary text-dark-50 font-weight-bold font-size-sm text-left w-90">@comment.Comment</div>
                                                        </div>
                                                        <!--end::Message In-->
                                                    }
                                                </div>
                                                <!--end::Messages-->
                                            </div>
                                        </div>
                                        <!--end::Body-->
                                        <div class="card-footer p-0">
                                            @if (visibleCommentBox)
                                            {
                                                <div class="input-group p-2">
                                                    <textarea id="@mentionId" class="form-control" placeholder="Type comment here."
                                                              style="resize: none" rows="3" aria-label="With textarea"></textarea>
                                                    <div class="input-group-append">
                                                        <span class="input-group-text btn btn-fms" @onclick="PostEmergencyComment">Post</span>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="row">
                                        @*<div class="input-group border border-secondary">
                                                <textarea id="@mentionId" class="form-control custom-control"
                                                          style="resize: none" rows="3"></textarea>
                                            </div>
                                            <span class="input-group-append btn btn-fms">Comment</span>*@
                                    </div>
                                    <div class="row pl-4">
                                        @foreach (var i in imageDataUrls)
                                        {
                                            <div class="col-3 mb-2 p-2">
                                                <img src="@i" style="width:90%;height:auto;" @onclick="() => DisplayImage(i)" />
                                            </div>
                                        }
                                        <div class="col-3 mb-2 p-2">
                                            <div class="d-flex" style="display: flex; align-items: flex-start; justify-content: flex-end; width: 100%;">
                                                <div class="mr-3">
                                                    <div class="container1">
                                                        <div class="button-wrap">
                                                            <label class="btn btn-fms btn-md text-uppercase font-weight-bold chat-send py-8 px-6" for="upload">Upload File</label>
                                                            <InputFile id="upload" OnChange="@OnInputFileChange" style=" display:none; position: absolute; z-index: -3; top: 15px; left: 20px; font-size: 17px; color: #b8b8b8;" multiple />
                                                        </div>
                                                    </div>
                                                </div>
                                                <div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-5">
                                <div class="row">
                                    <div class="card">
                                        <div class="card-header">
                                            <div class="card-title mb-0 font-weight-bolder">History</div>
                                        </div>
                                        <div class="card-body">
                                            <div class="row">
                                                <div class="col-xl-4">
                                                    <a href="#" class="btn btn-fms-emergency font-weight-boldest font-size-sm px-2 py-5">EMERGENCY <br /> 15 JOBS</a>
                                                </div>
                                                <div class="col-xl-4">
                                                    <a href="#" class="btn btn-fms font-weight-boldest font-size-sm px-2 py-5">ACCIDENTAL <br /> 15 JOBS</a>
                                                </div>
                                                <div class="col-xl-4">
                                                    <a href="#" class="btn btn-fms-daily font-weight-boldest font-size-sm px-5 py-5 w-100">DAILY <br /> 15 JOBS</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <hr />
                                <div class="row">
                                    <div class="col-xl-12">
                                        <div class="card">
                                            <div class="card-header">
                                                <div class="card-title mb-0 font-weight-bolder">Photo Viewer</div>
                                            </div>
                                            <div class="card-body">
                                                <div class="h-50">
                                                    <img src="@displayImage" style="width:99%;height:auto;" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!--end::Chat-->
                    </div>
                    <!--end::Container-->
                </div>
                <!--end::Content-->
            </div>
        }
    </div>

}
<SfDialog @bind-Visible="@ConfirmEmergencyDlgVisible" Width="400px" Target="#target" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            Confirmation
        </Header>
        <Content>
            <span>Brief Description</span>
            <span class="e-input-group w-100">
                <input type="text" id="password" name="Required" @bind-value="Description" class="e-input w-100">
            </span>
            Are you sure you want to mark vehicle @(emergencyCheckListVehicleNumber) as emergency?
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@DialogClose"></DialogEvents>
    <DialogButtons>
        <DialogButton Content="Yes" IsPrimary="true" OnClick="@ConfirmEmergency" />
        <DialogButton Content="No" OnClick="@HideDialog" />
    </DialogButtons>
</SfDialog>
<SfDialog @bind-Visible="@ConfirmAccidentDlgVisible" Width="400px" Target="#target" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            Confirmation
        </Header>
        <Content>
            <span>Brief Description</span>
            <span class="e-input-group w-100">
                <input type="text" id="password" name="Required" @bind-value="Description" class="e-input w-100">
            </span>
            Are you sure you want to mark vehicle @(accidentalCheckListVehicleNumber) as accident?
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@DialogClose"></DialogEvents>
    <DialogButtons>
        <DialogButton Content="Yes" IsPrimary="true" OnClick="@ConfirmAccident" />
        <DialogButton Content="No" OnClick="@HideDialog" />
    </DialogButtons>
</SfDialog>
<SfDialog @bind-Visible="@ConfirmDailyDlgVisible" Width="400px" Target="#target" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            Confirmation
        </Header>
        <Content>
            <span>Brief Description</span>
            <span class="e-input-group w-100">
                <input type="text" id="password" name="Required" @bind-value="Description" class="e-input w-100">
            </span>
            Are you sure you want to mark vehicle @(dailyCheckListVehicleNumber) as daily maintenance?
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@DialogClose"></DialogEvents>
    <DialogButtons>
        <DialogButton Content="Yes" IsPrimary="true" OnClick="@ConfirmDaily" />
        <DialogButton Content="No" OnClick="@HideDialog" />
    </DialogButtons>
</SfDialog>


<SfDialog Target="#target" Width="500px" ShowCloseIcon="true" @bind-Visible="responseDialogVisibility">
    <DialogTemplates>
        <Header> @responseHeader </Header>
        <Content>
            <p>
                @responseBody
            </p>
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@responseDialogClose"></DialogEvents>
</SfDialog>

@code
{
    private DotNetObjectReference<Index> dotNetObjectReference;

    #region Filter
    public List<SelectListItem> regionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> subRegionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> vehicleNumbersList { get; set; } = new List<SelectListItem>();

    public FMSVehicleVM Filter = new FMSVehicleVM();

    public List<FMSVehicleVM> filteredVehiclesList { get; set; } = new List<FMSVehicleVM>();

    public async void FilterData()
    {
        filteredVehiclesList = vehiclesList
            .Where(x => (string.IsNullOrEmpty(Filter.Region) || x.Region == Filter.Region))
            .Where(x => (string.IsNullOrEmpty(Filter.SubRegion) || x.SubRegion == Filter.SubRegion))
            .Where(x => (string.IsNullOrEmpty(Filter.VehicleNumber) || x.VehicleNumber == Filter.VehicleNumber))
            .ToList();
        await JSRuntime.InvokeVoidAsync("updateMarkers", dotNetObjectReference, filteredVehiclesList);
        StateHasChanged();
    }

    public async void ResetData()
    {
        Filter = new FMSVehicleVM();
        filteredVehiclesList = vehiclesList;
        await JSRuntime.InvokeVoidAsync("updateMarkers", dotNetObjectReference, filteredVehiclesList);
    }
    #endregion


    public List<FMSVehicleVM> vehiclesList { get; set; } = new List<FMSVehicleVM>();
    public List<GBMSUserVM> usersList { get; set; } = new List<GBMSUserVM>();
    public List<FMSAccidentalCheckCommentVM> commentsList = new List<FMSAccidentalCheckCommentVM>();

    public List<FMSAccidentalCheckVM> accidentalCheckList { get; set; }
    public Guid accidentalId { get; set; }
    public Guid accidentalCheckPointId { get; set; }

    public List<FMSEmergencyCheckVM> emergencyCheckList { get; set; }
    public Guid emergencyId { get; set; }
    public Guid emergencyCheckPointId { get; set; }

    public int AccidentalVehiclesCount { get; set; } = 0;
    public int EmergencyVehiclesCount { get; set; } = 0;
    public int PeriodicVehiclesCount { get; set; } = 0;
    public int MaintainedVehiclesCount { get; set; } = 0;
    public int TotalVehiclesCount { get; set; } = 0;

    public bool emergencyCheckListSideModal { get; set; } = false;
    public bool accidentalCheckListSideModal { get; set; } = false;
    public bool dailyCheckListSideModal { get; set; } = false;

    public string emergencyCheckListVehicleNumber;
    public string accidentalCheckListVehicleNumber;
    public string dailyCheckListVehicleNumber;

    public bool visibleCommentBox { get; set; } = true;

    public bool accidentalCommentModal { get; set; } = false;
    public bool emergencyCommentModal { get; set; } = false;
    FMSAccidentalCommentModalVM AccidentalCommentModal;
    FMSAccidentalCheckCommentVM AccidentalCheckComment;
    FMSEmergencyCommentModalVM EmergencyCommentModal;
    FMSEmergencyCheckCommentVM EmergencyCheckComment;

    public string commentSideModalHeading;

    public string mentionId;

    public string displayImage;

    public void DisplayImage(string item)
    {
        displayImage = item;
    }

    protected override async Task OnInitializedAsync()
    {
        StartTimer();
        dotNetObjectReference = DotNetObjectReference.Create(this);
        vehiclesList = await Http.GetFromJsonAsync<List<FMSVehicleVM>>("api/Vehicles/FMS/Demo/All");
        vehicleNumbersList = vehiclesList.GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        regionsList = vehiclesList.GroupBy(x => x.Region).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        subRegionsList = vehiclesList.GroupBy(x => x.SubRegion).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        filteredVehiclesList = vehiclesList;
        usersList = await Http.GetFromJsonAsync<List<GBMSUserVM>>("api/Users/FMS/All");
        CountVehicles(filteredVehiclesList);
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        mentionId = "mention1";
        await JSRuntime.InvokeVoidAsync("mention", dotNetObjectReference, usersList);
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initialize", dotNetObjectReference, filteredVehiclesList);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public void CountVehicles(List<FMSVehicleVM> vehicles)
    {
        TotalVehiclesCount = 0;
        AccidentalVehiclesCount = 0;
        EmergencyVehiclesCount = 0;
        PeriodicVehiclesCount = 0;
        MaintainedVehiclesCount = 0;
        foreach (var vehicle in vehicles)
        {
            switch (vehicle.Type)
            {
                case "maintained":
                    MaintainedVehiclesCount++;
                    break;
                case "emergency":
                    EmergencyVehiclesCount++;
                    break;
                case "periodic":
                    PeriodicVehiclesCount++;
                    break;
                case "accidental":
                    AccidentalVehiclesCount++;
                    break;
            }
            TotalVehiclesCount++;
        }
    }

    private IList<string> imageDataUrls = new List<string>();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 3;
        var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format,
                100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl =
                $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageDataUrls.Add(imageDataUrl);
        }
    }

    public void closeSideModals()
    {
        HideEmergencyCheckList();
        HideAccidentalCheckList();
        dailyCheckListSideModal = false;
        accidentalCommentModal = false;
        emergencyCommentModal = false;

        dailyCheckListVehicleNumber = null;
        commentSideModalHeading = null;
    }
    public void ShowHideDailyCheckList()
    {
        Description = null;
        dailyCheckListSideModal = !dailyCheckListSideModal;
    }

    public void closeAccidentalCommentModal()
    {
        Accidental_JSInvoked(AccidentalCommentModal.VehicleNumber);
        StateHasChanged();
    }
    public void closeEmergencyCommentModal()
    {
        Emergency_JSInvoked(EmergencyCommentModal.VehicleNumber);
        StateHasChanged();
    }

    public void closeCommentModals()
    {
        accidentalCommentModal = false;

        commentSideModalHeading = null;
    }

    #region JS Invokables
    [JSInvokable]
    public async void Emergency_JSInvoked(string vehicleNumber)
    {
        emergencyCheckListVehicleNumber = vehicleNumber;
        var vehicleResponse = await Http.PostAsJsonAsync("api/Vehicles/FMS/Demo/GetByNumber", new FMSVehicleVM() { VehicleNumber = vehicleNumber });
        var vehicle = Newtonsoft.Json.JsonConvert.DeserializeObject<FMSVehicleVM>(await vehicleResponse.Content.ReadAsStringAsync());
        if (vehicle.Type == "emergency")
        {
            var getEmergencyCheckListResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Emergency/FMS/CheckList", new ApiRequest() { VehicleNumber = vehicleNumber });
            if (getEmergencyCheckListResponse.StatusCode == System.Net.HttpStatusCode.OK)
            {
                string response = await (getEmergencyCheckListResponse).Content.ReadAsStringAsync();
                emergencyCheckList = JsonConvert.DeserializeObject<List<FMSEmergencyCheckVM>>(response);
                ShowEmergencyCheckList(emergencyCheckList);
            }
            else
            {
            }
        }
        else
        {
            ConfirmEmergencyDlgVisible = true;
        }
        StateHasChanged();
    }
    [JSInvokable]
    public async void Accidental_JSInvoked(string vehicleNumber)
    {
        accidentalCheckListVehicleNumber = vehicleNumber;
        var vehicleResponse = await Http.PostAsJsonAsync("api/Vehicles/FMS/Demo/GetByNumber", new FMSVehicleVM() { VehicleNumber = vehicleNumber });
        var vehicle = Newtonsoft.Json.JsonConvert.DeserializeObject<FMSVehicleVM>(await vehicleResponse.Content.ReadAsStringAsync());
        if (vehicle.Type == "accidental")
        {
            var getAccidentalCheckListResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Accident/FMS/CheckList", new ApiRequest() { VehicleNumber = vehicleNumber });

            if (getAccidentalCheckListResponse.StatusCode == System.Net.HttpStatusCode.OK)
            {
                string response = await (getAccidentalCheckListResponse).Content.ReadAsStringAsync();
                accidentalCheckList = JsonConvert.DeserializeObject<List<FMSAccidentalCheckVM>>(response);
                ShowAccidentalCheckList(accidentalCheckList);
            }
            else
            {
            }
        }
        else
        {
            ConfirmAccidentDlgVisible = true;
        }
        StateHasChanged();
    }
    [JSInvokable]
    public void Daily_JSInvoked(string vehicleNumber)
    {
        dailyCheckListVehicleNumber = vehicleNumber;
        ConfirmDailyDlgVisible = true;
        StateHasChanged();
    }
    [JSInvokable]
    public void History_JSInvoked(string vehicleNumber)
    {
    }
    [JSInvokable]
    public void mention_JSInvoked(List<FMSUserVM> mentionedUsers, string comment)
    {
        if (AccidentalCheckComment != null)
        {
            AccidentalCheckComment.Comment = comment;
            AccidentalCheckComment.Mentions = (string.Join(",", mentionedUsers.Select(x => x.Id).ToArray()));
        }
        if (EmergencyCheckComment != null)
        {
            EmergencyCheckComment.Comment = comment;
            EmergencyCheckComment.Mentions = (string.Join(",", mentionedUsers.Select(x => x.Id).ToArray()));
        }

        StateHasChanged();
    }
    #endregion

    #region Timer
    public void StartTimer()
    {
        Timer.SetTimer(5000);
        Timer.OnElapsed += TimerElapsedHandler;
        Console.WriteLine("Markers Sync Started.");
    }

    private async void TimerElapsedHandler()
    {
        vehiclesList = await Http.GetFromJsonAsync<List<FMSVehicleVM>>("api/Vehicles/FMS/Demo/All");
        filteredVehiclesList = vehiclesList;
        FilterData();
        CountVehicles(filteredVehiclesList);
        await JSRuntime.InvokeVoidAsync("updateMarkerPositions", dotNetObjectReference, filteredVehiclesList);
        StateHasChanged();
    }
    #endregion

    #region Dialog

    public bool ConfirmEmergencyDlgVisible { get; set; } = false;
    public bool ConfirmAccidentDlgVisible { get; set; } = false;
    public bool ConfirmDailyDlgVisible { get; set; } = false;

    public string Description { get; set; } = "";

    private void HideDialog(Object e)
    {
        this.ConfirmEmergencyDlgVisible = false;
        this.ConfirmAccidentDlgVisible = false;
        this.ConfirmDailyDlgVisible = false;
    }

    private void DialogClose(CloseEventArgs args)
    {
        this.ConfirmEmergencyDlgVisible = false;
        this.ConfirmAccidentDlgVisible = false;
        this.ConfirmDailyDlgVisible = false;
    }

    public async void ConfirmEmergency()
    {
        var newEmergency = new FMSEmergencyVM()
        {
            VehicleNumber = emergencyCheckListVehicleNumber,
            Description = Description,
            MaintenanceStatus = "Pending"
        };

        var getEmergencyCheckListResponse = await Http.PostAsJsonAsync<FMSEmergencyVM>("api/Emergency/Report", newEmergency);

        if (getEmergencyCheckListResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            string response = await (getEmergencyCheckListResponse).Content.ReadAsStringAsync();
            emergencyCheckList = JsonConvert.DeserializeObject<List<FMSEmergencyCheckVM>>(response);
            ShowEmergencyCheckList(emergencyCheckList);
            this.ConfirmEmergencyDlgVisible = false;
            StateHasChanged();
        }
    }

    public async void ConfirmAccident()
    {
        var newAccident = new FMSAccidentVM()
        {
            VehicleNumber = accidentalCheckListVehicleNumber,
            Description = Description,
            MaintenanceStatus = "Pending"
        };

        var getAccidentalCheckListResponse = await Http.PostAsJsonAsync<FMSAccidentVM>("api/Accident/Report", newAccident);

        if (getAccidentalCheckListResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            string response = await (getAccidentalCheckListResponse).Content.ReadAsStringAsync();
            accidentalCheckList = JsonConvert.DeserializeObject<List<FMSAccidentalCheckVM>>(response);
            ShowAccidentalCheckList(accidentalCheckList);
            this.ConfirmAccidentDlgVisible = false;
            StateHasChanged();
        }
    }

    public void ConfirmDaily()
    {
        this.ConfirmDailyDlgVisible = false;
        dailyCheckListSideModal = true;
    }
    #endregion


    public async void AccidentalCarOperational()
    {
        var vehicleResponse = await Http.PostAsJsonAsync("api/Accident/FMS/Demo/CarOperational",
            new FMSVehicleVM() { VehicleNumber = accidentalCheckListVehicleNumber });
        if (vehicleResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            responseHeader = "Success";
            responseBody = "Car has marked as operational.";
            responseDialogVisibility = true;
            closeSideModals();
        }
        StateHasChanged();
    }
    public async void AccidentalCloseJob()
    {
        var vehicleResponse = await Http.PostAsJsonAsync("api/Accident/FMS/Demo/CloseJob",
            new FMSVehicleVM() { VehicleNumber = accidentalCheckListVehicleNumber });
        if (vehicleResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            responseHeader = "Success";
            responseBody = "Job has marked as closed.";
            responseDialogVisibility = true;
            closeSideModals();
        }
        StateHasChanged();
    }

    public void ShowAccidentalCheckList(List<FMSAccidentalCheckVM> checkVMs)
    {
        accidentalId = checkVMs.FirstOrDefault().FMSAccidentId;
        accidentalCheckListSideModal = true;
        accidentalCommentModal = false;
    }

    public void ShowEmergencyCheckList(List<FMSEmergencyCheckVM> checkVMs)
    {
        emergencyId = checkVMs.FirstOrDefault().FMSEmergencyId;
        emergencyCheckListSideModal = true;
        emergencyCommentModal = false;
    }

    public async void ShowAccidentalCommentModal(Guid pointId)
    {
        closeSideModals();
        commentSideModalHeading = "Comment Box";
        AccidentalCommentModal = null;
        accidentalCommentModal = true;
        AccidentalCheckComment = new FMSAccidentalCheckCommentVM();
        var getFMSAccidentalCommentModalResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Accident/FMS/CheckList/Point", new ApiRequest() { FMSAccidentalCheckId = pointId, VehicleNumber = accidentalCheckListVehicleNumber });

        if (getFMSAccidentalCommentModalResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            string response = await (getFMSAccidentalCommentModalResponse).Content.ReadAsStringAsync();
            AccidentalCommentModal = JsonConvert.DeserializeObject<FMSAccidentalCommentModalVM>(response);
            AccidentalCheckComment.FMSAccidentalCheckId = pointId;
            AccidentalCheckComment.FMSAccidentId = AccidentalCommentModal.FMSAccidentId;
            AccidentalCheckComment.FMSVehicleId = AccidentalCommentModal.FMSVehicleId;
            AccidentalCheckComment.VehicleNumber = AccidentalCommentModal.VehicleNumber;
        }
        else
        {
        }


    }
    public async void MarkAccidentalPointDone(Guid pointId)
    {
        AccidentalCheckComment = new FMSAccidentalCheckCommentVM();
        var getMarkAccidentalPointDoneResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Accident/FMS/CheckList/Point/MarkDone",
            new ApiRequest() { FMSAccidentalCheckId = pointId, VehicleNumber = accidentalCheckListVehicleNumber });

        if (getMarkAccidentalPointDoneResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Accidental_JSInvoked(accidentalCheckListVehicleNumber);
        }
        else
        {
        }
    }
    public async void MarkEmergencyPointDone(Guid pointId)
    {
        EmergencyCheckComment = new FMSEmergencyCheckCommentVM();
        var getMarkEmergencyPointDoneResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Emergency/FMS/CheckList/Point/MarkDone",
            new ApiRequest() { FMSEmergencyCheckId = pointId, VehicleNumber = emergencyCheckListVehicleNumber });

        if (getMarkEmergencyPointDoneResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Emergency_JSInvoked(emergencyCheckListVehicleNumber);
        }
        else
        {
        }

    }
    public async void ShowEmergencyCommentModal(Guid pointId)
    {
        EmergencyCheckComment = new FMSEmergencyCheckCommentVM();
        var getFMSEmergencyCommentModalResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Emergency/FMS/CheckList/Point", new ApiRequest() { FMSEmergencyCheckId = pointId, VehicleNumber = emergencyCheckListVehicleNumber });

        if (getFMSEmergencyCommentModalResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            string response = await (getFMSEmergencyCommentModalResponse).Content.ReadAsStringAsync();
            EmergencyCommentModal = JsonConvert.DeserializeObject<FMSEmergencyCommentModalVM>(response);
            EmergencyCheckComment.FMSEmergencyCheckId = pointId;
            EmergencyCheckComment.FMSEmergencyId = EmergencyCommentModal.FMSEmergencyId;
            EmergencyCheckComment.FMSVehicleId = EmergencyCommentModal.FMSVehicleId;
            EmergencyCheckComment.VehicleNumber = EmergencyCommentModal.VehicleNumber;
        }
        else
        {
        }

        closeSideModals();
        commentSideModalHeading = "Comment Box";

        emergencyCommentModal = true;

    }

    public async void PostAccidentalComment()
    {
        visibleCommentBox = false;
        var postCommentResponse = await Http.PostAsJsonAsync<FMSAccidentalCheckCommentVM>("api/Accident/FMS/CheckList/Point/Comment/Add", AccidentalCheckComment);
        if (postCommentResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            closeSideModals();
            ShowAccidentalCommentModal(AccidentalCheckComment.FMSAccidentalCheckId);
            visibleCommentBox = true;
            StateHasChanged();
        }
        else
        {
        }

    }

    public async void PostEmergencyComment()
    {
        visibleCommentBox = false;
        EmergencyCheckComment.FMSUserId = new Guid("E7BA5D45-5EAC-4195-AB93-1060DF7EE7AE");
        var postCommentResponse = await Http.PostAsJsonAsync<FMSEmergencyCheckCommentVM>("api/Emergency/FMS/CheckList/Point/Comment/Add", EmergencyCheckComment);
        if (postCommentResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            ShowEmergencyCommentModal(EmergencyCheckComment.FMSEmergencyCheckId);
            visibleCommentBox = true;
            StateHasChanged();
            closeSideModals();

        }
        else
        {
        }

    }

    public void HideAccidentalCheckList()
    {
        accidentalCheckListSideModal = false;
        //accidentalCheckListVehicleNumber = null;
        accidentalId = Guid.Empty;
        accidentalCheckList = null;
    }

    public void HideEmergencyCheckList()
    {
        emergencyCheckListSideModal = false;
        //emergencyCheckListVehicleNumber = null;
        emergencyId = Guid.Empty;
        emergencyCheckList = null;
    }
    public async void EmergencyCloseJob()
    {
        var vehicleResponse = await Http.PostAsJsonAsync("api/Emergency/FMS/Demo/CloseJob",
            new ApiRequest() { VehicleNumber = emergencyCheckListVehicleNumber });
        if (vehicleResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            closeSideModals();
        }
        StateHasChanged();
    }

    #region Dialog
    public bool responseDialogVisibility { get; set; }
    public string responseHeader { get; set; }
    public string responseBody { get; set; }

    private void responseDialogClose(CloseEventArgs args)
    {
        //CloseAddUserSideBar();
    }
    #endregion
}
