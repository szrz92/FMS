@page "/"
@page "/Index"
@inject IJSRuntime JSRuntime
@inject Services.TimerService Timer
@inject HttpClient Http
@implements IDisposable
<!-- Bootstrap -->
<link href="assets/js/mentions/css/jquery.mentiony.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css">
<style>
    /*textarea {*/
    /*width: 100%*/
    /*}

    .mentiony-container, .mentiony-content {*/
    /*width: 100% !important;*/
    /*}*/

    .demo-item {
        height: 300px;
    }

        .demo-item .demo, .demo-item .demo > * {
            height: 100%;
        }

        .demo-item .code, .demo-item .code > * {
            height: 100%;
        }

            .demo-item .code, .demo-item .code > pre > code {
                padding: 0;
                background: none
            }

                .demo-item .code > pre > code {
                    width: 999px !important;
                    display: block;
                }

    pre.prettyprint {
        background-color: #693d3d !important;
    }

    #legend {
        font-family: Arial, sans-serif;
        background: #fff;
        padding: 10px;
        margin: 10px;
        /*border: 3px solid #000;*/
    }

        #legend img {
            vertical-align: middle;
        }

        #legend td {
            padding: 0.3rem;
        }
</style>
<!--begin::Subheader-->
<div class="subheader py-2 py-lg-4  subheader-solid " id="kt_subheader">
    <div class=" container-fluid  d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
        <div class="d-flex align-items-center flex-wrap mr-2">
            <h5 class="text-dark font-weight-bold mt-2 mb-2 mr-5">
                Dashboard
            </h5>
            <div class="subheader-separator subheader-separator-ver mt-2 mb-2 mr-5 bg-gray-200"></div>

        </div>
        <div class="d-flex align-items-center">
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a region" AllowFiltering="true" DataSource="@regionsList" @bind-Value="Filter.Region">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" ValueChange="OnRegionChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a subregion" AllowFiltering="true" DataSource="@subRegionsList" @bind-Value="Filter.SubRegion">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" ValueChange="OnSubRegionChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>
            <div class="mr-2" style="width:135%">
                <div class="control-wrapper">
                    <SfDropDownList TItem="SelectListItem" TValue="string" Placeholder="Select a vehicle" AllowFiltering="true" DataSource="@vehicleNumbersList" @bind-Value="Filter.VehicleNumber">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" ValueChange="OnVehicleNumberChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>
            <button class="btn btn-bg-danger text-white mr-2" @onclick="FilterData">FILTER</button>
            <button class="btn btn-bg-info text-white mr-2" @onclick="ResetData">RESET</button>
        </div>
    </div>
</div>
<div class="d-flex flex-column-fluid mt-4">
    <!--begin::Container-->
    <div class="container-fluid h-100">
        <div class="row d-flex">
            <div class="col-sm-7 col-md-8 col-lg-8 col-xl-10">
                <div id="map" class="container-fluid" style="height:85vh;"></div>
                <div id="legend">
                    <table class="table table-borderless p-0" style="display: table-row;">
                        <tr>
                            <td>
                                <p style="color: #00CB14">Maintained</p>
                            </td>
                            <td>
                                <img style="float:right; height:70%;" src="assets/icons/Maintained1x.png">
                            </td>
                            <td>
                                <p style="color: #00CB14">@MaintainedVehiclesCount</p>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <p style="color: #FF6F00">Periodic</p>
                            </td>
                            <td>
                                <img style="float:right; height:70%;" src="assets/icons/Periodic1x.png">
                            </td>
                            <td>
                                <p style="color: #FF6F00">@PeriodicVehiclesCount</p>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <p style="color: #DFBB0B">Emergency</p>
                            </td>
                            <td>
                                <img style="float:right; height:70%;" src="assets/icons/Emergency1x.png">
                            </td>
                            <td>
                                <p style="color: #DFBB0B">@EmergencyVehiclesCount</p>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <p style="color: #FF0000">Accidental</p>
                            </td>
                            <td>
                                <img style="float:right; height:70%;" src="assets/icons/Accidental1x.png">
                            </td>
                            <td>
                                <p style="color: #FF0000">@AccidentalVehiclesCount</p>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="col-sm-5 col-md-4 col-lg-4 col-xl-2" style="height:80vh;overflow-y:scroll;">
                <div class="row">

                    <AuthorizeView Roles="SA, HMT, RMTO">
                        <JobsCount Accidents="@AccidentalVehiclesCount" Emergency="@EmergencyVehiclesCount" Periodic="@PeriodicVehiclesCount" />
                    </AuthorizeView>
                    <AuthorizeView Roles="SA, HMT, CIM, RMTO, RAO">
                        <CompletedJobsCount />
                    </AuthorizeView>
                    <AuthorizeView Roles="SA, HMT, CIM, RMTO, RAO">
                        <PendingJobsCount />
                    </AuthorizeView>
                    <AuthorizeView Roles="SA, HMT, CPM, RMTO, RAO">
                        <PendingSoonJobsCount Count="@PeriodicVehiclesCount" />
                    </AuthorizeView>
                    <AuthorizeView Roles="SA, HMT, MTAM, CIM, CPM, RMTO, RAO">
                        <ActiveComplaintsCount />
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>
</div>

@if (emergencyCheckListSideModal)
{
    <SOS.FMS.Client.Components.Emergency.Checklist OnVisibilityChanged="ShowHideEmergencyCheckList" Visible="@emergencyCheckListSideModal"
                                                   VehicleNumber="@emergencyCheckListVehicleNumber" EmergencyCheckList="@emergencyCheckList" />
}
@if (accidentalCheckListSideModal)
{
    <SOS.FMS.Client.Components.Accident.CheckList OnVisibilityChanged="ShowHideAccidentalCheckList" Visible="@accidentalCheckListSideModal"
                                                  VehicleNumber="@accidentalCheckListVehicleNumber" AccidentalsCheckList="@accidentalCheckList" />
}

@if (dailyCheckListSideModal)
{
    if (!string.IsNullOrEmpty(dailyCheckListVehicleNumber))
    {
        <SOS.FMS.Client.Components.Daily.CheckList OnVisibilityChanged="ShowHideDailyCheckList" Visible="@dailyCheckListSideModal" VehicleNumber="@dailyCheckListVehicleNumber" />
    }
}

@if (periodicCheckListSideModal)
{
    if (!string.IsNullOrEmpty(periodicCheckVehicleNumber))
    {
        <SOS.FMS.Client.Components.Periodic.Checklist VehicleNumber="@periodicCheckVehicleNumber" OnVisibilityChanged="ShowHidePeriodicCheckList" />
    }
}

<SfDialog @bind-Visible="@ConfirmEmergencyDlgVisible" Width="400px" Target="#target" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            Confirmation
        </Header>
        <Content>
            <span>Brief Description</span>
            <span class="e-input-group w-100">
                <input type="text" id="password" name="Required" @bind-value="Description" class="e-input w-100">
            </span>
            Are you sure you want to mark vehicle @(emergencyCheckListVehicleNumber) as emergency?
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@DialogClose"></DialogEvents>
    <DialogButtons>
        <DialogButton Content="Yes" IsPrimary="true" OnClick="@ConfirmEmergency" />
        <DialogButton Content="No" OnClick="@HideDialog" />
    </DialogButtons>
</SfDialog>
<SfDialog @bind-Visible="@ConfirmAccidentDlgVisible" Width="400px" Target="#target" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            Confirmation
        </Header>
        <Content>
            <span>Brief Description</span>
            <span class="e-input-group w-100">
                <input type="text" id="password" name="Required" @bind-value="Description" class="e-input w-100">
            </span>
            Are you sure you want to mark vehicle @(accidentalCheckListVehicleNumber) as accident?
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@DialogClose"></DialogEvents>
    <DialogButtons>
        <DialogButton Content="Yes" IsPrimary="true" OnClick="@ConfirmAccident" />
        <DialogButton Content="No" OnClick="@HideDialog" />
    </DialogButtons>
</SfDialog>
<SfDialog @bind-Visible="@HistoryDlgVisible" Width="600px" Height="600px" Target="#target" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            History
        </Header>
        <Content>
            <div class="d-flex flex-column">
                <div class="row">
                    <div class="col-2 font-weight-bolder">Type</div>
                    <div class="col-6 font-weight-bolder">Description</div>
                    <div class="col-2 font-weight-bolder">Status</div>
                    <div class="col-2 font-weight-bolder">Updated</div>
                </div>
                @if (histories != null)
                {
                    foreach (var h in histories)
                    {
                        <div class="row">
                            <div class="col-2">@h.Type</div>
                            <div class="col-6">@h.Description</div>
                            <div class="col-2">@h.Status</div>
                            <div class="col-2">@h.LastUpdated.ToShortDateString()</div>
                        </div>
                    }
                }
                else
                {
                    <div class="row">
                        <div class="col-12">No Data Available</div>
                    </div>
                }
            </div>
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@DialogClose"></DialogEvents>
</SfDialog>
@if (!string.IsNullOrEmpty(periodicCheckVehicleNumber) && PeriodicHistoryDlgVisible)
{
    <SfDialog @bind-Visible="@PeriodicHistoryDlgVisible" Width="800px" Height="600px" Target="#target" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
                History
            </Header>
            <Content>
                <SOS.FMS.Client.Components.Periodic.ShortPeriodicHistory VehicleNumber="@periodicCheckVehicleNumber" />
            </Content>

        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Maintain" IsPrimary="true" OnClick="@MaintainBtnClick" />
        </DialogButtons>
        <DialogEvents Closed="@DialogClose"></DialogEvents>
    </SfDialog>
}
@code
{
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }
    private DotNetObjectReference<Index> dotNetObjectReference;

    #region Filter
    public List<SelectListItem> regionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> subRegionsList { get; set; } = new List<SelectListItem>();
    public List<SelectListItem> vehicleNumbersList { get; set; } = new List<SelectListItem>();

    public VehicleVM Filter = new VehicleVM();

    public List<VehicleVM> filteredVehiclesList { get; set; } = new List<VehicleVM>();

    public async void FilterData()
    {
        filteredVehiclesList = vehiclesList
            .Where(x => (string.IsNullOrEmpty(Filter.Region) || x.Region == Filter.Region))
            .Where(x => (string.IsNullOrEmpty(Filter.SubRegion) || x.SubRegion == Filter.SubRegion))
            .Where(x => (string.IsNullOrEmpty(Filter.VehicleNumber) || x.VehicleNumber == Filter.VehicleNumber))
            .ToList();
        await JSRuntime.InvokeVoidAsync("updateMarkers", dotNetObjectReference, filteredVehiclesList);
        StateHasChanged();
    }
    public void FilterDataWithoutUpdateMarkers()
    {
        filteredVehiclesList = vehiclesList
            .Where(x => (string.IsNullOrEmpty(Filter.Region) || x.Region == Filter.Region))
            .Where(x => (string.IsNullOrEmpty(Filter.SubRegion) || x.SubRegion == Filter.SubRegion))
            .Where(x => (string.IsNullOrEmpty(Filter.VehicleNumber) || x.VehicleNumber == Filter.VehicleNumber))
            .ToList();
        //await JSRuntime.InvokeVoidAsync("updateMarkers", dotNetObjectReference, filteredVehiclesList);
        StateHasChanged();
    }

    public async void ResetData()
    {
        Filter = new VehicleVM();
        filteredVehiclesList = vehiclesList;
        await JSRuntime.InvokeVoidAsync("updateMarkers", dotNetObjectReference, filteredVehiclesList);
    }

    public async Task OnRegionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        vehicleNumbersList = vehiclesList.Where(x => x.Region == args.Value).GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        subRegionsList = vehiclesList.Where(x => x.Region == args.Value).GroupBy(x => x.SubRegion).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        StateHasChanged();
    }
    public async Task OnSubRegionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        Filter.Region = vehiclesList.Where(x => x.SubRegion == args.Value).FirstOrDefault().Region;
        vehicleNumbersList = vehiclesList.Where(x => x.SubRegion == args.Value)
            .GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
    }
    public async Task OnVehicleNumberChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        Filter.Region = vehiclesList.Where(x => x.VehicleNumber == args.Value).FirstOrDefault().Region;
        Filter.SubRegion = vehiclesList.Where(x => x.VehicleNumber == args.Value).FirstOrDefault().SubRegion;
        StateHasChanged();
    }
    #endregion

    public List<VehicleVM> vehiclesList { get; set; } = new List<VehicleVM>();

    public int AccidentalVehiclesCount { get; set; } = 0;
    public int EmergencyVehiclesCount { get; set; } = 0;
    public int PeriodicVehiclesCount { get; set; } = 0;
    public int MaintainedVehiclesCount { get; set; } = 0;
    public int TotalVehiclesCount { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {

        dotNetObjectReference = DotNetObjectReference.Create(this);
        vehiclesList = await Http.GetFromJsonAsync<List<VehicleVM>>("api/Vehicles/FMS/Demo/All");
        //vehiclesList = await Http.GetFromJsonAsync<List<VehicleVM>>("api/Vehicles/FMS/All");
        vehicleNumbersList = vehiclesList.GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        regionsList = vehiclesList.GroupBy(x => x.Region).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        subRegionsList = vehiclesList.GroupBy(x => x.SubRegion).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();
        filteredVehiclesList = vehiclesList;
        CountVehicles(filteredVehiclesList);
        StartTimer();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initialize", dotNetObjectReference, filteredVehiclesList);
        }
    }

    public void CountVehicles(List<VehicleVM> vehicles)
    {
        TotalVehiclesCount = 0;
        AccidentalVehiclesCount = 0;
        EmergencyVehiclesCount = 0;
        PeriodicVehiclesCount = 0;
        MaintainedVehiclesCount = 0;
        foreach (var vehicle in vehicles)
        {

            switch (vehicle.Type)
            {
                case "maintained":
                    MaintainedVehiclesCount++;
                    break;
                case "emergency":
                    EmergencyVehiclesCount++;
                    break;
                case "periodic":
                    PeriodicVehiclesCount++;
                    break;
                case "accidental":
                    AccidentalVehiclesCount++;
                    break;
            }

            switch (vehicle.PeriodicRemarks)
            {
                case "maintained":
                    MaintainedVehiclesCount++;
                    break;
                case "emergency":
                    EmergencyVehiclesCount++;
                    break;
                case "Periodic Maintenance Pending":
                    PeriodicVehiclesCount++;
                    break;
                case "accidental":
                    AccidentalVehiclesCount++;
                    break;
            }
            TotalVehiclesCount++;
        }
    }

    #region Daily Check List
    public bool dailyCheckListSideModal { get; set; } = false;

    public string dailyCheckListVehicleNumber;
    public void ShowHideDailyCheckList()
    {
        Description = null;
        dailyCheckListSideModal = !dailyCheckListSideModal;
    }
    #endregion

    #region Accidental Check List

    public List<FMSAccidentalCheckVM> accidentalCheckList { get; set; }

    public string accidentalCheckListVehicleNumber;

    public bool accidentalCheckListSideModal { get; set; } = false;

    public void ShowHideAccidentalCheckList()
    {
        Description = null;
        accidentalCheckListSideModal = !accidentalCheckListSideModal;
    }

    public void ShowAccidentalCheckList(List<FMSAccidentalCheckVM> checkVMs)
    {
        accidentalCheckListSideModal = true;
    }


    #endregion

    #region Emergency Check List
    public List<FMSEmergencyCheckVM> emergencyCheckList { get; set; }

    public string emergencyCheckListVehicleNumber;

    public bool emergencyCheckListSideModal { get; set; } = false;
    public void ShowHideEmergencyCheckList()
    {
        Description = null;
        emergencyCheckListSideModal = !emergencyCheckListSideModal;
    }
    public void ShowEmergencyCheckList(List<FMSEmergencyCheckVM> checkVMs)
    {
        emergencyCheckListSideModal = true;
    }

    #endregion

    #region Periodic Checklist
    public bool periodicCheckListSideModal { get; set; } = false;
    public string periodicCheckVehicleNumber;
    public void ShowHidePeriodicCheckList()
    {
        Description = null;
        Periodic_JSInvoked(periodicCheckVehicleNumber);
        periodicCheckListSideModal = !periodicCheckListSideModal;
        StateHasChanged();
    }
    #endregion

    #region JS Invokables
    [JSInvokable]
    public async void Emergency_JSInvoked(string vehicleNumber)
    {

        emergencyCheckListVehicleNumber = vehicleNumber;

        var emergencyStatusResponse = await Http.PostAsJsonAsync("api/Emergency/FMS/checkEmergencyStatus", new ApiRequest() { VehicleNumber = vehicleNumber });

        var vehicleResponse = await Http.PostAsJsonAsync("api/Vehicles/FMS/Demo/GetByNumber", new ApiRequest() { VehicleNumber = vehicleNumber });
        string res = await vehicleResponse.Content.ReadAsStringAsync();
        var vehicle = Newtonsoft.Json.JsonConvert.DeserializeObject<VehicleVM>(res);
        if (vehicle.Type == "emergency")
        {
            var getEmergencyCheckListResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Emergency/FMS/CheckList", new ApiRequest() { VehicleNumber = vehicleNumber });
            if (getEmergencyCheckListResponse.StatusCode == System.Net.HttpStatusCode.OK)
            {
                emergencyCheckList = JsonConvert.DeserializeObject<List<FMSEmergencyCheckVM>>(await getEmergencyCheckListResponse.Content.ReadAsStringAsync());
                ShowEmergencyCheckList(emergencyCheckList);
            }
            else
            {
            }
        }
        else
        {
            ConfirmEmergencyDlgVisible = true;
        }
        StateHasChanged();
    }
    [JSInvokable]
    public async void Accidental_JSInvoked(string vehicleNumber)
    {
        try
        {
            accidentalCheckListVehicleNumber = vehicleNumber;

            var accidentStatusResponse = await Http.PostAsJsonAsync("api/Accident/FMS/checkAccidentalStatus", new ApiRequest() { VehicleNumber = vehicleNumber });

            var vehicleResponse = await Http.PostAsJsonAsync("api/Vehicles/FMS/Demo/GetByNumber", new ApiRequest() { VehicleNumber = vehicleNumber });
            var vehicle = JsonConvert.DeserializeObject<VehicleVM>(await vehicleResponse.Content.ReadAsStringAsync());

            if (vehicle.Type == "accidental" || accidentStatusResponse.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var getAccidentalCheckListResponse = await Http.PostAsJsonAsync<ApiRequest>("api/Accident/FMS/CheckList", new ApiRequest() { VehicleNumber = vehicleNumber });

                if (getAccidentalCheckListResponse.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    accidentalCheckList = JsonConvert.DeserializeObject<List<FMSAccidentalCheckVM>>(await getAccidentalCheckListResponse.Content.ReadAsStringAsync());
                    ShowAccidentalCheckList(accidentalCheckList);
                }
                else
                {
                }
            }
            else
            {
                ConfirmAccidentDlgVisible = true;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw;
        }
    }
    [JSInvokable]
    public void Daily_JSInvoked(string vehicleNumber)
    {
        dailyCheckListVehicleNumber = vehicleNumber;
        dailyCheckListSideModal = true;
        StateHasChanged();
    }

    [JSInvokable]
    public void Periodic_JSInvoked(string vehicleNumber)
    {
        periodicCheckVehicleNumber = vehicleNumber;
        PeriodicHistoryDlgVisible = true;
        StateHasChanged();
    }


    List<HistoryVM> histories { get; set; }
    [JSInvokable]
    public async void History_JSInvoked(string vehicleNumber)
    {
        var history = await Http.PostAsJsonAsync("api/Jobs/History", new ApiRequest() { VehicleNumber = vehicleNumber });
        if (history.IsSuccessStatusCode)
        {
            string historyString = await history.Content.ReadAsStringAsync();
            histories = JsonConvert.DeserializeObject<List<HistoryVM>>(historyString);
            HistoryDlgVisible = true;
            StateHasChanged();
        }
    }
    #endregion

    #region Timer
    public async void StartTimer()
    {
        await JSRuntime.InvokeVoidAsync("updateMarkers", dotNetObjectReference, filteredVehiclesList);
        Timer.SetTimer(10000);
        Timer.OnElapsed += TimerElapsedHandler;
        Console.WriteLine("Markers Sync Started.");
    }

    private async void TimerElapsedHandler()
    {
        vehiclesList = await Http.GetFromJsonAsync<List<VehicleVM>>("api/Vehicles/FMS/Demo/All");
        //vehiclesList = await Http.GetFromJsonAsync<List<VehicleVM>>("api/Vehicles/FMS/All");
        filteredVehiclesList = vehiclesList;
        FilterDataWithoutUpdateMarkers();
        CountVehicles(filteredVehiclesList);
        await JSRuntime.InvokeVoidAsync("updateMarkerPositions", dotNetObjectReference, filteredVehiclesList);
        StateHasChanged();
    }
    #endregion

    #region Dialog

    public bool ConfirmEmergencyDlgVisible { get; set; } = false;
    public bool ConfirmAccidentDlgVisible { get; set; } = false;
    public bool HistoryDlgVisible { get; set; } = false;
    public bool PeriodicHistoryDlgVisible { get; set; } = false;

    public string Description { get; set; } = "";

    private void HideDialog(Object e)
    {
        this.ConfirmEmergencyDlgVisible = false;
        this.ConfirmAccidentDlgVisible = false;
        this.PeriodicHistoryDlgVisible = false;
    }

    private void DialogClose(CloseEventArgs args)
    {
        this.ConfirmEmergencyDlgVisible = false;
        this.ConfirmAccidentDlgVisible = false;
        this.HistoryDlgVisible = false;
        this.PeriodicHistoryDlgVisible = false;
    }
    public void MaintainBtnClick()
    {
        periodicCheckListSideModal = true;
        this.PeriodicHistoryDlgVisible = false;
        StateHasChanged();
    }

    public async void ConfirmEmergency()
    {
        var newEmergency = new FMSEmergencyVM()
        {
            VehicleNumber = emergencyCheckListVehicleNumber,
            Description = Description,
            MaintenanceStatus = "Pending"
        };

        var getEmergencyCheckListResponse = await Http.PostAsJsonAsync<FMSEmergencyVM>("api/Emergency/Report", newEmergency);

        if (getEmergencyCheckListResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            string response = await (getEmergencyCheckListResponse).Content.ReadAsStringAsync();
            emergencyCheckList = JsonConvert.DeserializeObject<List<FMSEmergencyCheckVM>>(response);
            ShowEmergencyCheckList(emergencyCheckList);
            this.ConfirmEmergencyDlgVisible = false;
            StateHasChanged();
        }
    }

    public async void ConfirmAccident()
    {
        var newAccident = new FMSAccidentVM()
        {
            VehicleNumber = accidentalCheckListVehicleNumber,
            Description = Description,
            MaintenanceStatus = "Pending"
        };

        var getAccidentalCheckListResponse = await Http.PostAsJsonAsync<FMSAccidentVM>("api/Accident/Report", newAccident);

        if (getAccidentalCheckListResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            string response = await (getAccidentalCheckListResponse).Content.ReadAsStringAsync();
            accidentalCheckList = JsonConvert.DeserializeObject<List<FMSAccidentalCheckVM>>(response);

            ShowAccidentalCheckList(accidentalCheckList);
            this.ConfirmAccidentDlgVisible = false;
            StateHasChanged();
        }
    }

    #endregion

    public void Dispose()
    {
        Timer.Dispose();
    }
}
